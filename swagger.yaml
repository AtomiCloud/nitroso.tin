openapi: 3.0.1
info:
  title: Lapras Nitroso Zinc API
  description: 'Nitroso-Zinc: API for BunnyBooker'
  contact:
    name: kirinnee
    email: kirinnee97@gmail.com
  version: "1.0"
paths:
  /api/v{version}/Booking:
    get:
      tags:
        - Booking
      parameters:
        - name: Date
          in: query
          style: form
          schema:
            type: string
        - name: Direction
          in: query
          style: form
          schema:
            type: string
        - name: Time
          in: query
          style: form
          schema:
            type: string
        - name: UserId
          in: query
          style: form
          schema:
            type: string
        - name: Limit
          in: query
          style: form
          schema:
            type: integer
            format: int32
        - name: Skip
          in: query
          style: form
          schema:
            type: integer
            format: int32
        - name: version
          in: path
          description: The requested API version
          required: true
          style: simple
          schema:
            type: string
            default: "1.0"
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookingPrincipalRes'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookingPrincipalRes'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookingPrincipalRes'
  /api/v{version}/Booking/{userId}/{id}:
    get:
      tags:
        - Booking
      parameters:
        - name: userId
          in: path
          required: true
          style: simple
          schema:
            type: string
        - name: id
          in: path
          required: true
          style: simple
          schema:
            type: string
            format: uuid
        - name: version
          in: path
          description: The requested API version
          required: true
          style: simple
          schema:
            type: string
            default: "1.0"
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/BookingRes'
            application/json:
              schema:
                $ref: '#/components/schemas/BookingRes'
            text/json:
              schema:
                $ref: '#/components/schemas/BookingRes'
  /api/v{version}/Booking/complete/{id}:
    post:
      tags:
        - Booking
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          schema:
            type: string
            format: uuid
        - name: version
          in: path
          description: The requested API version
          required: true
          style: simple
          schema:
            type: string
            default: "1.0"
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/BookingPrincipalRes'
            application/json:
              schema:
                $ref: '#/components/schemas/BookingPrincipalRes'
            text/json:
              schema:
                $ref: '#/components/schemas/BookingPrincipalRes'
  /api/v{version}/Booking/counts:
    get:
      tags:
        - Booking
      parameters:
        - name: version
          in: path
          description: The requested API version
          required: true
          style: simple
          schema:
            type: string
            default: "1.0"
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookingCountRes'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookingCountRes'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookingCountRes'
  /api/v{version}/Booking/bypass/{userId}:
    post:
      tags:
        - Booking
      parameters:
        - name: userId
          in: path
          required: true
          style: simple
          schema:
            type: string
        - name: version
          in: path
          description: The requested API version
          required: true
          style: simple
          schema:
            type: string
            default: "1.0"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBookingReq'
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/BookingPrincipalRes'
            application/json:
              schema:
                $ref: '#/components/schemas/BookingPrincipalRes'
            text/json:
              schema:
                $ref: '#/components/schemas/BookingPrincipalRes'
  /api/v{version}/Booking/cancel/bypass/{id}:
    post:
      tags:
        - Booking
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          schema:
            type: string
            format: uuid
        - name: version
          in: path
          description: The requested API version
          required: true
          style: simple
          schema:
            type: string
            default: "1.0"
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/BookingPrincipalRes'
            application/json:
              schema:
                $ref: '#/components/schemas/BookingPrincipalRes'
            text/json:
              schema:
                $ref: '#/components/schemas/BookingPrincipalRes'
  /api/v{version}/Passenger:
    get:
      tags:
        - Passenger
      parameters:
        - name: UserId
          in: query
          style: form
          schema:
            type: string
        - name: Name
          in: query
          style: form
          schema:
            type: string
        - name: Limit
          in: query
          style: form
          schema:
            type: integer
            format: int32
        - name: Skip
          in: query
          style: form
          schema:
            type: integer
            format: int32
        - name: version
          in: path
          description: The requested API version
          required: true
          style: simple
          schema:
            type: string
            default: "1.0"
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PassengerPrincipalRes'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PassengerPrincipalRes'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PassengerPrincipalRes'
  /api/v{version}/Passenger/{userId}/{id}:
    get:
      tags:
        - Passenger
      parameters:
        - name: userId
          in: path
          required: true
          style: simple
          schema:
            type: string
        - name: id
          in: path
          required: true
          style: simple
          schema:
            type: string
            format: uuid
        - name: version
          in: path
          description: The requested API version
          required: true
          style: simple
          schema:
            type: string
            default: "1.0"
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PassengerRes'
            application/json:
              schema:
                $ref: '#/components/schemas/PassengerRes'
            text/json:
              schema:
                $ref: '#/components/schemas/PassengerRes'
    put:
      tags:
        - Passenger
      parameters:
        - name: userId
          in: path
          required: true
          style: simple
          schema:
            type: string
        - name: id
          in: path
          required: true
          style: simple
          schema:
            type: string
            format: uuid
        - name: version
          in: path
          description: The requested API version
          required: true
          style: simple
          schema:
            type: string
            default: "1.0"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePassengerReq'
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PassengerPrincipalRes'
            application/json:
              schema:
                $ref: '#/components/schemas/PassengerPrincipalRes'
            text/json:
              schema:
                $ref: '#/components/schemas/PassengerPrincipalRes'
    delete:
      tags:
        - Passenger
      parameters:
        - name: userId
          in: path
          required: true
          style: simple
          schema:
            type: string
        - name: id
          in: path
          required: true
          style: simple
          schema:
            type: string
            format: uuid
        - name: version
          in: path
          description: The requested API version
          required: true
          style: simple
          schema:
            type: string
            default: "1.0"
      responses:
        "200":
          description: Success
  /api/v{version}/Passenger/{userId}:
    post:
      tags:
        - Passenger
      parameters:
        - name: userId
          in: path
          required: true
          style: simple
          schema:
            type: string
        - name: version
          in: path
          description: The requested API version
          required: true
          style: simple
          schema:
            type: string
            default: "1.0"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePassengerReq'
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PassengerPrincipalRes'
            application/json:
              schema:
                $ref: '#/components/schemas/PassengerPrincipalRes'
            text/json:
              schema:
                $ref: '#/components/schemas/PassengerPrincipalRes'
  /api/v{version}/Schedule/latest:
    get:
      tags:
        - Schedule
      parameters:
        - name: version
          in: path
          description: The requested API version
          required: true
          style: simple
          schema:
            type: string
            default: "1.0"
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/LatestScheduleRes'
            application/json:
              schema:
                $ref: '#/components/schemas/LatestScheduleRes'
            text/json:
              schema:
                $ref: '#/components/schemas/LatestScheduleRes'
  /api/v{version}/Schedule/range/{From}/{To}:
    get:
      tags:
        - Schedule
      parameters:
        - name: From
          in: path
          required: true
          style: simple
          schema:
            type: string
        - name: To
          in: path
          required: true
          style: simple
          schema:
            type: string
        - name: version
          in: path
          description: The requested API version
          required: true
          style: simple
          schema:
            type: string
            default: "1.0"
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SchedulePrincipalRes'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SchedulePrincipalRes'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SchedulePrincipalRes'
  /api/v{version}/Schedule/{Date}:
    get:
      tags:
        - Schedule
      parameters:
        - name: Date
          in: path
          required: true
          style: simple
          schema:
            type: string
        - name: version
          in: path
          description: The requested API version
          required: true
          style: simple
          schema:
            type: string
            default: "1.0"
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/SchedulePrincipalRes'
            application/json:
              schema:
                $ref: '#/components/schemas/SchedulePrincipalRes'
            text/json:
              schema:
                $ref: '#/components/schemas/SchedulePrincipalRes'
    put:
      tags:
        - Schedule
      parameters:
        - name: Date
          in: path
          required: true
          style: simple
          schema:
            type: string
        - name: version
          in: path
          description: The requested API version
          required: true
          style: simple
          schema:
            type: string
            default: "1.0"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScheduleRecordReq'
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/SchedulePrincipalRes'
            application/json:
              schema:
                $ref: '#/components/schemas/SchedulePrincipalRes'
            text/json:
              schema:
                $ref: '#/components/schemas/SchedulePrincipalRes'
    delete:
      tags:
        - Schedule
      parameters:
        - name: Date
          in: path
          required: true
          style: simple
          schema:
            type: string
        - name: version
          in: path
          description: The requested API version
          required: true
          style: simple
          schema:
            type: string
            default: "1.0"
      responses:
        "200":
          description: Success
  /api/v{version}/Schedule/bulk:
    put:
      tags:
        - Schedule
      parameters:
        - name: version
          in: path
          description: The requested API version
          required: true
          style: simple
          schema:
            type: string
            default: "1.0"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScheduleBulkUpdateReq'
      responses:
        "200":
          description: Success
  /:
    get:
      tags:
        - System
      responses:
        "200":
          description: Success
  /api/v{version}/Timing/{Direction}:
    get:
      tags:
        - Timing
      parameters:
        - name: Direction
          in: path
          required: true
          style: simple
          schema:
            type: string
        - name: version
          in: path
          description: The requested API version
          required: true
          style: simple
          schema:
            type: string
            default: "1.0"
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/TimingRes'
            application/json:
              schema:
                $ref: '#/components/schemas/TimingRes'
            text/json:
              schema:
                $ref: '#/components/schemas/TimingRes'
    put:
      tags:
        - Timing
      parameters:
        - name: Direction
          in: path
          required: true
          style: simple
          schema:
            type: string
        - name: version
          in: path
          description: The requested API version
          required: true
          style: simple
          schema:
            type: string
            default: "1.0"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TimingReq'
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/TimingPrincipalRes'
            application/json:
              schema:
                $ref: '#/components/schemas/TimingPrincipalRes'
            text/json:
              schema:
                $ref: '#/components/schemas/TimingPrincipalRes'
  /api/v{version}/User:
    get:
      tags:
        - User
      parameters:
        - name: Id
          in: query
          style: form
          schema:
            type: string
        - name: Username
          in: query
          style: form
          schema:
            type: string
        - name: Limit
          in: query
          style: form
          schema:
            type: integer
            format: int32
        - name: Skip
          in: query
          style: form
          schema:
            type: integer
            format: int32
        - name: version
          in: path
          description: The requested API version
          required: true
          style: simple
          schema:
            type: string
            default: "1.0"
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserPrincipalRes'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserPrincipalRes'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserPrincipalRes'
    post:
      tags:
        - User
      parameters:
        - name: version
          in: path
          description: The requested API version
          required: true
          style: simple
          schema:
            type: string
            default: "1.0"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserReq'
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/UserPrincipalRes'
            application/json:
              schema:
                $ref: '#/components/schemas/UserPrincipalRes'
            text/json:
              schema:
                $ref: '#/components/schemas/UserPrincipalRes'
  /api/v{version}/User/Me:
    get:
      tags:
        - User
      parameters:
        - name: version
          in: path
          description: The requested API version
          required: true
          style: simple
          schema:
            type: string
            default: "1.0"
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: string
            application/json:
              schema:
                type: string
            text/json:
              schema:
                type: string
  /api/v{version}/User/{id}:
    get:
      tags:
        - User
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          schema:
            type: string
        - name: version
          in: path
          description: The requested API version
          required: true
          style: simple
          schema:
            type: string
            default: "1.0"
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/UserRes'
            application/json:
              schema:
                $ref: '#/components/schemas/UserRes'
            text/json:
              schema:
                $ref: '#/components/schemas/UserRes'
    put:
      tags:
        - User
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          schema:
            type: string
        - name: version
          in: path
          description: The requested API version
          required: true
          style: simple
          schema:
            type: string
            default: "1.0"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserReq'
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/UserPrincipalRes'
            application/json:
              schema:
                $ref: '#/components/schemas/UserPrincipalRes'
            text/json:
              schema:
                $ref: '#/components/schemas/UserPrincipalRes'
    delete:
      tags:
        - User
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          schema:
            type: string
        - name: version
          in: path
          description: The requested API version
          required: true
          style: simple
          schema:
            type: string
            default: "1.0"
      responses:
        "200":
          description: Success
  /api/v{version}/User/username/{username}:
    get:
      tags:
        - User
      parameters:
        - name: username
          in: path
          required: true
          style: simple
          schema:
            type: string
        - name: version
          in: path
          description: The requested API version
          required: true
          style: simple
          schema:
            type: string
            default: "1.0"
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/UserRes'
            application/json:
              schema:
                $ref: '#/components/schemas/UserRes'
            text/json:
              schema:
                $ref: '#/components/schemas/UserRes'
  /api/v{version}/User/exist/{username}:
    get:
      tags:
        - User
      parameters:
        - name: username
          in: path
          required: true
          style: simple
          schema:
            type: string
        - name: version
          in: path
          description: The requested API version
          required: true
          style: simple
          schema:
            type: string
            default: "1.0"
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/UserExistRes'
            application/json:
              schema:
                $ref: '#/components/schemas/UserExistRes'
            text/json:
              schema:
                $ref: '#/components/schemas/UserExistRes'
  /api/v{version}/error-info:
    get:
      tags:
        - V1Error
      parameters:
        - name: version
          in: path
          description: The requested API version
          required: true
          style: simple
          schema:
            type: string
            default: "1.0"
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  type: string
            application/json:
              schema:
                type: array
                items:
                  type: string
            text/json:
              schema:
                type: array
                items:
                  type: string
  /api/v{version}/error-info/{id}:
    get:
      tags:
        - V1Error
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          schema:
            type: string
        - name: version
          in: path
          description: The requested API version
          required: true
          style: simple
          schema:
            type: string
            default: "1.0"
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorInfo'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInfo'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorInfo'
components:
  schemas:
    BookingCountRes:
      type: object
      properties:
        date:
          type: string
          nullable: true
        time:
          type: string
          nullable: true
        direction:
          type: string
          nullable: true
        ticketsNeeded:
          type: integer
          format: int32
      additionalProperties: false
    BookingPassengerReq:
      type: object
      properties:
        fullName:
          type: string
          nullable: true
        gender:
          type: string
          nullable: true
        passportExpiry:
          type: string
          nullable: true
        passportNumber:
          type: string
          nullable: true
      additionalProperties: false
    BookingPassengerRes:
      type: object
      properties:
        fullName:
          type: string
          nullable: true
        gender:
          type: string
          nullable: true
        passportExpiry:
          type: string
          nullable: true
        passportNumber:
          type: string
          nullable: true
      additionalProperties: false
    BookingPrincipalRes:
      type: object
      properties:
        id:
          type: string
          format: uuid
        date:
          type: string
          nullable: true
        time:
          type: string
          nullable: true
        direction:
          type: string
          nullable: true
        passengers:
          type: array
          items:
            $ref: '#/components/schemas/BookingPassengerRes'
          nullable: true
        createdAt:
          type: string
          format: date-time
        completedAt:
          type: string
          format: date-time
          nullable: true
        status:
          type: string
          nullable: true
      additionalProperties: false
    BookingRes:
      type: object
      properties:
        principal:
          $ref: '#/components/schemas/BookingPrincipalRes'
        user:
          $ref: '#/components/schemas/UserPrincipalRes'
      additionalProperties: false
    CreateBookingReq:
      type: object
      properties:
        date:
          type: string
          nullable: true
        time:
          type: string
          nullable: true
        direction:
          type: string
          nullable: true
        passengers:
          type: array
          items:
            $ref: '#/components/schemas/BookingPassengerReq'
          nullable: true
      additionalProperties: false
    CreatePassengerReq:
      type: object
      properties:
        fullName:
          type: string
          nullable: true
        gender:
          type: string
          nullable: true
        passportExpiry:
          type: string
          nullable: true
        passportNumber:
          type: string
          nullable: true
      additionalProperties: false
    CreateUserReq:
      type: object
      properties:
        username:
          type: string
          nullable: true
      additionalProperties: false
    ErrorInfo:
      type: object
      properties:
        schema:
          nullable: true
        id:
          type: string
          nullable: true
        title:
          type: string
          nullable: true
        version:
          type: string
          nullable: true
      additionalProperties: false
    LatestScheduleRes:
      type: object
      properties:
        date:
          type: string
          nullable: true
      additionalProperties: false
    PassengerPrincipalRes:
      type: object
      properties:
        id:
          type: string
          format: uuid
        fullName:
          type: string
          nullable: true
        gender:
          type: string
          nullable: true
        passportExpiry:
          type: string
          nullable: true
        passportNumber:
          type: string
          nullable: true
      additionalProperties: false
    PassengerRes:
      type: object
      properties:
        principal:
          $ref: '#/components/schemas/PassengerPrincipalRes'
        user:
          $ref: '#/components/schemas/UserPrincipalRes'
      additionalProperties: false
    ScheduleBulkUpdateReq:
      type: object
      properties:
        schedules:
          type: array
          items:
            $ref: '#/components/schemas/SchedulePrincipalReq'
          nullable: true
      additionalProperties: false
    SchedulePrincipalReq:
      type: object
      properties:
        date:
          type: string
          nullable: true
        record:
          $ref: '#/components/schemas/ScheduleRecordReq'
      additionalProperties: false
    SchedulePrincipalRes:
      type: object
      properties:
        date:
          type: string
          nullable: true
        confirmed:
          type: boolean
        jToWExcluded:
          type: array
          items:
            type: string
          nullable: true
        wToJExcluded:
          type: array
          items:
            type: string
          nullable: true
      additionalProperties: false
    ScheduleRecordReq:
      type: object
      properties:
        confirmed:
          type: boolean
        jToWExcluded:
          type: array
          items:
            type: string
          nullable: true
        wToJExcluded:
          type: array
          items:
            type: string
          nullable: true
      additionalProperties: false
    TimingPrincipalRes:
      type: object
      properties:
        direction:
          type: string
          nullable: true
        timings:
          type: array
          items:
            type: string
          nullable: true
      additionalProperties: false
    TimingReq:
      type: object
      properties:
        timings:
          type: array
          items:
            type: string
          nullable: true
      additionalProperties: false
    TimingRes:
      type: object
      properties:
        principal:
          $ref: '#/components/schemas/TimingPrincipalRes'
      additionalProperties: false
    UpdatePassengerReq:
      type: object
      properties:
        fullName:
          type: string
          nullable: true
        gender:
          type: string
          nullable: true
        passportExpiry:
          type: string
          nullable: true
        passportNumber:
          type: string
          nullable: true
      additionalProperties: false
    UpdateUserReq:
      type: object
      properties:
        username:
          type: string
          nullable: true
      additionalProperties: false
    UserExistRes:
      type: object
      properties:
        exists:
          type: boolean
      additionalProperties: false
    UserPrincipalRes:
      type: object
      properties:
        id:
          type: string
          nullable: true
        username:
          type: string
          nullable: true
      additionalProperties: false
    UserRes:
      type: object
      properties:
        principal:
          $ref: '#/components/schemas/UserPrincipalRes'
      additionalProperties: false
  securitySchemes:
    Bearer:
      type: apiKey
      description: JWT Authorization header using the Bearer scheme. Enter 'Bearer' [space] and then your token in the text input below.
      name: Authorization
      in: header
security:
  - Bearer: []
