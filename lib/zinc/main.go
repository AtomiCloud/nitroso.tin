// Package zinc provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version (devel) DO NOT EDIT.
package zinc

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerScopes = "Bearer.Scopes"
)

// BookingCountRes defines model for BookingCountRes.
type BookingCountRes struct {
	Date          *string `json:"date"`
	Direction     *string `json:"direction"`
	TicketsNeeded *int32  `json:"ticketsNeeded,omitempty"`
	Time          *string `json:"time"`
}

// BookingPassengerReq defines model for BookingPassengerReq.
type BookingPassengerReq struct {
	FullName       *string `json:"fullName"`
	Gender         *string `json:"gender"`
	PassportExpiry *string `json:"passportExpiry"`
	PassportNumber *string `json:"passportNumber"`
}

// BookingPassengerRes defines model for BookingPassengerRes.
type BookingPassengerRes struct {
	FullName       *string `json:"fullName"`
	Gender         *string `json:"gender"`
	PassportExpiry *string `json:"passportExpiry"`
	PassportNumber *string `json:"passportNumber"`
}

// BookingPrincipalRes defines model for BookingPrincipalRes.
type BookingPrincipalRes struct {
	CompletedAt *time.Time           `json:"completedAt"`
	CreatedAt   *time.Time           `json:"createdAt,omitempty"`
	Date        *string              `json:"date"`
	Direction   *string              `json:"direction"`
	Id          *openapi_types.UUID  `json:"id,omitempty"`
	Passenger   *BookingPassengerRes `json:"passenger,omitempty"`
	Status      *string              `json:"status"`
	TicketLink  *string              `json:"ticketLink"`
	Time        *string              `json:"time"`
}

// BookingRes defines model for BookingRes.
type BookingRes struct {
	Principal *BookingPrincipalRes `json:"principal,omitempty"`
	User      *UserPrincipalRes    `json:"user,omitempty"`
}

// CreateBookingReq defines model for CreateBookingReq.
type CreateBookingReq struct {
	Date      *string              `json:"date"`
	Direction *string              `json:"direction"`
	Passenger *BookingPassengerReq `json:"passenger,omitempty"`
	Time      *string              `json:"time"`
}

// CreatePassengerReq defines model for CreatePassengerReq.
type CreatePassengerReq struct {
	FullName       *string `json:"fullName"`
	Gender         *string `json:"gender"`
	PassportExpiry *string `json:"passportExpiry"`
	PassportNumber *string `json:"passportNumber"`
}

// CreateUserReq defines model for CreateUserReq.
type CreateUserReq struct {
	Username *string `json:"username"`
}

// ErrorInfo defines model for ErrorInfo.
type ErrorInfo struct {
	Id      *string      `json:"id"`
	Schema  *interface{} `json:"schema"`
	Title   *string      `json:"title"`
	Version *string      `json:"version"`
}

// LatestScheduleRes defines model for LatestScheduleRes.
type LatestScheduleRes struct {
	Date *string `json:"date"`
}

// PassengerPrincipalRes defines model for PassengerPrincipalRes.
type PassengerPrincipalRes struct {
	FullName       *string             `json:"fullName"`
	Gender         *string             `json:"gender"`
	Id             *openapi_types.UUID `json:"id,omitempty"`
	PassportExpiry *string             `json:"passportExpiry"`
	PassportNumber *string             `json:"passportNumber"`
}

// PassengerRes defines model for PassengerRes.
type PassengerRes struct {
	Principal *PassengerPrincipalRes `json:"principal,omitempty"`
	User      *UserPrincipalRes      `json:"user,omitempty"`
}

// ScheduleBulkUpdateReq defines model for ScheduleBulkUpdateReq.
type ScheduleBulkUpdateReq struct {
	Schedules *[]SchedulePrincipalReq `json:"schedules"`
}

// SchedulePrincipalReq defines model for SchedulePrincipalReq.
type SchedulePrincipalReq struct {
	Date   *string            `json:"date"`
	Record *ScheduleRecordReq `json:"record,omitempty"`
}

// SchedulePrincipalRes defines model for SchedulePrincipalRes.
type SchedulePrincipalRes struct {
	Confirmed    *bool     `json:"confirmed,omitempty"`
	Date         *string   `json:"date"`
	JToWExcluded *[]string `json:"jToWExcluded"`
	WToJExcluded *[]string `json:"wToJExcluded"`
}

// ScheduleRecordReq defines model for ScheduleRecordReq.
type ScheduleRecordReq struct {
	Confirmed    *bool     `json:"confirmed,omitempty"`
	JToWExcluded *[]string `json:"jToWExcluded"`
	WToJExcluded *[]string `json:"wToJExcluded"`
}

// TimingPrincipalRes defines model for TimingPrincipalRes.
type TimingPrincipalRes struct {
	Direction *string   `json:"direction"`
	Timings   *[]string `json:"timings"`
}

// TimingReq defines model for TimingReq.
type TimingReq struct {
	Timings *[]string `json:"timings"`
}

// TimingRes defines model for TimingRes.
type TimingRes struct {
	Principal *TimingPrincipalRes `json:"principal,omitempty"`
}

// UpdatePassengerReq defines model for UpdatePassengerReq.
type UpdatePassengerReq struct {
	FullName       *string `json:"fullName"`
	Gender         *string `json:"gender"`
	PassportExpiry *string `json:"passportExpiry"`
	PassportNumber *string `json:"passportNumber"`
}

// UpdateUserReq defines model for UpdateUserReq.
type UpdateUserReq struct {
	Username *string `json:"username"`
}

// UserExistRes defines model for UserExistRes.
type UserExistRes struct {
	Exists *bool `json:"exists,omitempty"`
}

// UserPrincipalRes defines model for UserPrincipalRes.
type UserPrincipalRes struct {
	Id       *string `json:"id"`
	Username *string `json:"username"`
}

// UserRes defines model for UserRes.
type UserRes struct {
	Principal *UserPrincipalRes `json:"principal,omitempty"`
}

// GetApiVVersionBookingParams defines parameters for GetApiVVersionBooking.
type GetApiVVersionBookingParams struct {
	Date      *string `form:"Date,omitempty" json:"Date,omitempty"`
	Direction *string `form:"Direction,omitempty" json:"Direction,omitempty"`
	Time      *string `form:"Time,omitempty" json:"Time,omitempty"`
	UserId    *string `form:"UserId,omitempty" json:"UserId,omitempty"`
	Limit     *int32  `form:"Limit,omitempty" json:"Limit,omitempty"`
	Skip      *int32  `form:"Skip,omitempty" json:"Skip,omitempty"`
}

// PostApiVVersionBookingCompleteIdJSONBody defines parameters for PostApiVVersionBookingCompleteId.
type PostApiVVersionBookingCompleteIdJSONBody struct {
	File *openapi_types.File `json:"file,omitempty"`
}

// PostApiVVersionBookingCompleteIdMultipartBody defines parameters for PostApiVVersionBookingCompleteId.
type PostApiVVersionBookingCompleteIdMultipartBody struct {
	File *openapi_types.File `json:"file,omitempty"`
}

// GetApiVVersionPassengerParams defines parameters for GetApiVVersionPassenger.
type GetApiVVersionPassengerParams struct {
	UserId *string `form:"UserId,omitempty" json:"UserId,omitempty"`
	Name   *string `form:"Name,omitempty" json:"Name,omitempty"`
	Limit  *int32  `form:"Limit,omitempty" json:"Limit,omitempty"`
	Skip   *int32  `form:"Skip,omitempty" json:"Skip,omitempty"`
}

// GetApiVVersionUserParams defines parameters for GetApiVVersionUser.
type GetApiVVersionUserParams struct {
	Id       *string `form:"Id,omitempty" json:"Id,omitempty"`
	Username *string `form:"Username,omitempty" json:"Username,omitempty"`
	Limit    *int32  `form:"Limit,omitempty" json:"Limit,omitempty"`
	Skip     *int32  `form:"Skip,omitempty" json:"Skip,omitempty"`
}

// PostApiVVersionBookingBypassUserIdJSONRequestBody defines body for PostApiVVersionBookingBypassUserId for application/json ContentType.
type PostApiVVersionBookingBypassUserIdJSONRequestBody = CreateBookingReq

// PostApiVVersionBookingCompleteIdJSONRequestBody defines body for PostApiVVersionBookingCompleteId for application/json ContentType.
type PostApiVVersionBookingCompleteIdJSONRequestBody PostApiVVersionBookingCompleteIdJSONBody

// PostApiVVersionBookingCompleteIdMultipartRequestBody defines body for PostApiVVersionBookingCompleteId for multipart/form-data ContentType.
type PostApiVVersionBookingCompleteIdMultipartRequestBody PostApiVVersionBookingCompleteIdMultipartBody

// PostApiVVersionPassengerUserIdJSONRequestBody defines body for PostApiVVersionPassengerUserId for application/json ContentType.
type PostApiVVersionPassengerUserIdJSONRequestBody = CreatePassengerReq

// PutApiVVersionPassengerUserIdIdJSONRequestBody defines body for PutApiVVersionPassengerUserIdId for application/json ContentType.
type PutApiVVersionPassengerUserIdIdJSONRequestBody = UpdatePassengerReq

// PutApiVVersionScheduleBulkJSONRequestBody defines body for PutApiVVersionScheduleBulk for application/json ContentType.
type PutApiVVersionScheduleBulkJSONRequestBody = ScheduleBulkUpdateReq

// PutApiVVersionScheduleDateJSONRequestBody defines body for PutApiVVersionScheduleDate for application/json ContentType.
type PutApiVVersionScheduleDateJSONRequestBody = ScheduleRecordReq

// PutApiVVersionTimingDirectionJSONRequestBody defines body for PutApiVVersionTimingDirection for application/json ContentType.
type PutApiVVersionTimingDirectionJSONRequestBody = TimingReq

// PostApiVVersionUserJSONRequestBody defines body for PostApiVVersionUser for application/json ContentType.
type PostApiVVersionUserJSONRequestBody = CreateUserReq

// PutApiVVersionUserIdJSONRequestBody defines body for PutApiVVersionUserId for application/json ContentType.
type PutApiVVersionUserIdJSONRequestBody = UpdateUserReq

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// Get request
	Get(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiVVersionBooking request
	GetApiVVersionBooking(ctx context.Context, version string, params *GetApiVVersionBookingParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiVVersionBookingBuyingId request
	PostApiVVersionBookingBuyingId(ctx context.Context, version string, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiVVersionBookingBypassUserIdWithBody request with any body
	PostApiVVersionBookingBypassUserIdWithBody(ctx context.Context, version string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiVVersionBookingBypassUserId(ctx context.Context, version string, userId string, body PostApiVVersionBookingBypassUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiVVersionBookingCancelBypassId request
	PostApiVVersionBookingCancelBypassId(ctx context.Context, version string, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiVVersionBookingCompleteIdWithBody request with any body
	PostApiVVersionBookingCompleteIdWithBody(ctx context.Context, version string, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiVVersionBookingCompleteId(ctx context.Context, version string, id openapi_types.UUID, body PostApiVVersionBookingCompleteIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiVVersionBookingCounts request
	GetApiVVersionBookingCounts(ctx context.Context, version string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiVVersionBookingReserveDirectionDateTime request
	GetApiVVersionBookingReserveDirectionDateTime(ctx context.Context, version string, direction string, date string, time string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiVVersionBookingUserIdId request
	GetApiVVersionBookingUserIdId(ctx context.Context, version string, userId string, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiVVersionPassenger request
	GetApiVVersionPassenger(ctx context.Context, version string, params *GetApiVVersionPassengerParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiVVersionPassengerUserIdWithBody request with any body
	PostApiVVersionPassengerUserIdWithBody(ctx context.Context, version string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiVVersionPassengerUserId(ctx context.Context, version string, userId string, body PostApiVVersionPassengerUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiVVersionPassengerUserIdId request
	DeleteApiVVersionPassengerUserIdId(ctx context.Context, version string, userId string, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiVVersionPassengerUserIdId request
	GetApiVVersionPassengerUserIdId(ctx context.Context, version string, userId string, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiVVersionPassengerUserIdIdWithBody request with any body
	PutApiVVersionPassengerUserIdIdWithBody(ctx context.Context, version string, userId string, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiVVersionPassengerUserIdId(ctx context.Context, version string, userId string, id openapi_types.UUID, body PutApiVVersionPassengerUserIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiVVersionScheduleBulkWithBody request with any body
	PutApiVVersionScheduleBulkWithBody(ctx context.Context, version string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiVVersionScheduleBulk(ctx context.Context, version string, body PutApiVVersionScheduleBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiVVersionScheduleLatest request
	GetApiVVersionScheduleLatest(ctx context.Context, version string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiVVersionScheduleRangeFromTo request
	GetApiVVersionScheduleRangeFromTo(ctx context.Context, version string, from string, to string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiVVersionScheduleDate request
	DeleteApiVVersionScheduleDate(ctx context.Context, version string, date string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiVVersionScheduleDate request
	GetApiVVersionScheduleDate(ctx context.Context, version string, date string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiVVersionScheduleDateWithBody request with any body
	PutApiVVersionScheduleDateWithBody(ctx context.Context, version string, date string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiVVersionScheduleDate(ctx context.Context, version string, date string, body PutApiVVersionScheduleDateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiVVersionTimingDirection request
	GetApiVVersionTimingDirection(ctx context.Context, version string, direction string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiVVersionTimingDirectionWithBody request with any body
	PutApiVVersionTimingDirectionWithBody(ctx context.Context, version string, direction string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiVVersionTimingDirection(ctx context.Context, version string, direction string, body PutApiVVersionTimingDirectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiVVersionUser request
	GetApiVVersionUser(ctx context.Context, version string, params *GetApiVVersionUserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiVVersionUserWithBody request with any body
	PostApiVVersionUserWithBody(ctx context.Context, version string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiVVersionUser(ctx context.Context, version string, body PostApiVVersionUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiVVersionUserMe request
	GetApiVVersionUserMe(ctx context.Context, version string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiVVersionUserExistUsername request
	GetApiVVersionUserExistUsername(ctx context.Context, version string, username string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiVVersionUserUsernameUsername request
	GetApiVVersionUserUsernameUsername(ctx context.Context, version string, username string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiVVersionUserId request
	DeleteApiVVersionUserId(ctx context.Context, version string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiVVersionUserId request
	GetApiVVersionUserId(ctx context.Context, version string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiVVersionUserIdWithBody request with any body
	PutApiVVersionUserIdWithBody(ctx context.Context, version string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiVVersionUserId(ctx context.Context, version string, id string, body PutApiVVersionUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiVVersionErrorInfo request
	GetApiVVersionErrorInfo(ctx context.Context, version string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiVVersionErrorInfoId request
	GetApiVVersionErrorInfoId(ctx context.Context, version string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) Get(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiVVersionBooking(ctx context.Context, version string, params *GetApiVVersionBookingParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiVVersionBookingRequest(c.Server, version, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiVVersionBookingBuyingId(ctx context.Context, version string, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiVVersionBookingBuyingIdRequest(c.Server, version, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiVVersionBookingBypassUserIdWithBody(ctx context.Context, version string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiVVersionBookingBypassUserIdRequestWithBody(c.Server, version, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiVVersionBookingBypassUserId(ctx context.Context, version string, userId string, body PostApiVVersionBookingBypassUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiVVersionBookingBypassUserIdRequest(c.Server, version, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiVVersionBookingCancelBypassId(ctx context.Context, version string, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiVVersionBookingCancelBypassIdRequest(c.Server, version, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiVVersionBookingCompleteIdWithBody(ctx context.Context, version string, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiVVersionBookingCompleteIdRequestWithBody(c.Server, version, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiVVersionBookingCompleteId(ctx context.Context, version string, id openapi_types.UUID, body PostApiVVersionBookingCompleteIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiVVersionBookingCompleteIdRequest(c.Server, version, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiVVersionBookingCounts(ctx context.Context, version string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiVVersionBookingCountsRequest(c.Server, version)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiVVersionBookingReserveDirectionDateTime(ctx context.Context, version string, direction string, date string, time string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiVVersionBookingReserveDirectionDateTimeRequest(c.Server, version, direction, date, time)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiVVersionBookingUserIdId(ctx context.Context, version string, userId string, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiVVersionBookingUserIdIdRequest(c.Server, version, userId, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiVVersionPassenger(ctx context.Context, version string, params *GetApiVVersionPassengerParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiVVersionPassengerRequest(c.Server, version, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiVVersionPassengerUserIdWithBody(ctx context.Context, version string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiVVersionPassengerUserIdRequestWithBody(c.Server, version, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiVVersionPassengerUserId(ctx context.Context, version string, userId string, body PostApiVVersionPassengerUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiVVersionPassengerUserIdRequest(c.Server, version, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiVVersionPassengerUserIdId(ctx context.Context, version string, userId string, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiVVersionPassengerUserIdIdRequest(c.Server, version, userId, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiVVersionPassengerUserIdId(ctx context.Context, version string, userId string, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiVVersionPassengerUserIdIdRequest(c.Server, version, userId, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiVVersionPassengerUserIdIdWithBody(ctx context.Context, version string, userId string, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiVVersionPassengerUserIdIdRequestWithBody(c.Server, version, userId, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiVVersionPassengerUserIdId(ctx context.Context, version string, userId string, id openapi_types.UUID, body PutApiVVersionPassengerUserIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiVVersionPassengerUserIdIdRequest(c.Server, version, userId, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiVVersionScheduleBulkWithBody(ctx context.Context, version string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiVVersionScheduleBulkRequestWithBody(c.Server, version, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiVVersionScheduleBulk(ctx context.Context, version string, body PutApiVVersionScheduleBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiVVersionScheduleBulkRequest(c.Server, version, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiVVersionScheduleLatest(ctx context.Context, version string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiVVersionScheduleLatestRequest(c.Server, version)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiVVersionScheduleRangeFromTo(ctx context.Context, version string, from string, to string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiVVersionScheduleRangeFromToRequest(c.Server, version, from, to)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiVVersionScheduleDate(ctx context.Context, version string, date string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiVVersionScheduleDateRequest(c.Server, version, date)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiVVersionScheduleDate(ctx context.Context, version string, date string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiVVersionScheduleDateRequest(c.Server, version, date)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiVVersionScheduleDateWithBody(ctx context.Context, version string, date string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiVVersionScheduleDateRequestWithBody(c.Server, version, date, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiVVersionScheduleDate(ctx context.Context, version string, date string, body PutApiVVersionScheduleDateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiVVersionScheduleDateRequest(c.Server, version, date, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiVVersionTimingDirection(ctx context.Context, version string, direction string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiVVersionTimingDirectionRequest(c.Server, version, direction)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiVVersionTimingDirectionWithBody(ctx context.Context, version string, direction string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiVVersionTimingDirectionRequestWithBody(c.Server, version, direction, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiVVersionTimingDirection(ctx context.Context, version string, direction string, body PutApiVVersionTimingDirectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiVVersionTimingDirectionRequest(c.Server, version, direction, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiVVersionUser(ctx context.Context, version string, params *GetApiVVersionUserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiVVersionUserRequest(c.Server, version, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiVVersionUserWithBody(ctx context.Context, version string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiVVersionUserRequestWithBody(c.Server, version, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiVVersionUser(ctx context.Context, version string, body PostApiVVersionUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiVVersionUserRequest(c.Server, version, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiVVersionUserMe(ctx context.Context, version string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiVVersionUserMeRequest(c.Server, version)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiVVersionUserExistUsername(ctx context.Context, version string, username string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiVVersionUserExistUsernameRequest(c.Server, version, username)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiVVersionUserUsernameUsername(ctx context.Context, version string, username string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiVVersionUserUsernameUsernameRequest(c.Server, version, username)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiVVersionUserId(ctx context.Context, version string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiVVersionUserIdRequest(c.Server, version, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiVVersionUserId(ctx context.Context, version string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiVVersionUserIdRequest(c.Server, version, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiVVersionUserIdWithBody(ctx context.Context, version string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiVVersionUserIdRequestWithBody(c.Server, version, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiVVersionUserId(ctx context.Context, version string, id string, body PutApiVVersionUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiVVersionUserIdRequest(c.Server, version, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiVVersionErrorInfo(ctx context.Context, version string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiVVersionErrorInfoRequest(c.Server, version)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiVVersionErrorInfoId(ctx context.Context, version string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiVVersionErrorInfoIdRequest(c.Server, version, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetRequest generates requests for Get
func NewGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiVVersionBookingRequest generates requests for GetApiVVersionBooking
func NewGetApiVVersionBookingRequest(server string, version string, params *GetApiVVersionBookingParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v%s/Booking", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Date != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Date", runtime.ParamLocationQuery, *params.Date); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Direction != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Direction", runtime.ParamLocationQuery, *params.Direction); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Time != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Time", runtime.ParamLocationQuery, *params.Time); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "UserId", runtime.ParamLocationQuery, *params.UserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Skip != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Skip", runtime.ParamLocationQuery, *params.Skip); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiVVersionBookingBuyingIdRequest generates requests for PostApiVVersionBookingBuyingId
func NewPostApiVVersionBookingBuyingIdRequest(server string, version string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v%s/Booking/buying/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiVVersionBookingBypassUserIdRequest calls the generic PostApiVVersionBookingBypassUserId builder with application/json body
func NewPostApiVVersionBookingBypassUserIdRequest(server string, version string, userId string, body PostApiVVersionBookingBypassUserIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiVVersionBookingBypassUserIdRequestWithBody(server, version, userId, "application/json", bodyReader)
}

// NewPostApiVVersionBookingBypassUserIdRequestWithBody generates requests for PostApiVVersionBookingBypassUserId with any type of body
func NewPostApiVVersionBookingBypassUserIdRequestWithBody(server string, version string, userId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v%s/Booking/bypass/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiVVersionBookingCancelBypassIdRequest generates requests for PostApiVVersionBookingCancelBypassId
func NewPostApiVVersionBookingCancelBypassIdRequest(server string, version string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v%s/Booking/cancel/bypass/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiVVersionBookingCompleteIdRequest calls the generic PostApiVVersionBookingCompleteId builder with application/json body
func NewPostApiVVersionBookingCompleteIdRequest(server string, version string, id openapi_types.UUID, body PostApiVVersionBookingCompleteIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiVVersionBookingCompleteIdRequestWithBody(server, version, id, "application/json", bodyReader)
}

// NewPostApiVVersionBookingCompleteIdRequestWithBody generates requests for PostApiVVersionBookingCompleteId with any type of body
func NewPostApiVVersionBookingCompleteIdRequestWithBody(server string, version string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v%s/Booking/complete/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiVVersionBookingCountsRequest generates requests for GetApiVVersionBookingCounts
func NewGetApiVVersionBookingCountsRequest(server string, version string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v%s/Booking/counts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiVVersionBookingReserveDirectionDateTimeRequest generates requests for GetApiVVersionBookingReserveDirectionDateTime
func NewGetApiVVersionBookingReserveDirectionDateTimeRequest(server string, version string, direction string, date string, time string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "Direction", runtime.ParamLocationPath, direction)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "Date", runtime.ParamLocationPath, date)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "Time", runtime.ParamLocationPath, time)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v%s/Booking/reserve/%s/%s/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiVVersionBookingUserIdIdRequest generates requests for GetApiVVersionBookingUserIdId
func NewGetApiVVersionBookingUserIdIdRequest(server string, version string, userId string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v%s/Booking/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiVVersionPassengerRequest generates requests for GetApiVVersionPassenger
func NewGetApiVVersionPassengerRequest(server string, version string, params *GetApiVVersionPassengerParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v%s/Passenger", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.UserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "UserId", runtime.ParamLocationQuery, *params.UserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Skip != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Skip", runtime.ParamLocationQuery, *params.Skip); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiVVersionPassengerUserIdRequest calls the generic PostApiVVersionPassengerUserId builder with application/json body
func NewPostApiVVersionPassengerUserIdRequest(server string, version string, userId string, body PostApiVVersionPassengerUserIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiVVersionPassengerUserIdRequestWithBody(server, version, userId, "application/json", bodyReader)
}

// NewPostApiVVersionPassengerUserIdRequestWithBody generates requests for PostApiVVersionPassengerUserId with any type of body
func NewPostApiVVersionPassengerUserIdRequestWithBody(server string, version string, userId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v%s/Passenger/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiVVersionPassengerUserIdIdRequest generates requests for DeleteApiVVersionPassengerUserIdId
func NewDeleteApiVVersionPassengerUserIdIdRequest(server string, version string, userId string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v%s/Passenger/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiVVersionPassengerUserIdIdRequest generates requests for GetApiVVersionPassengerUserIdId
func NewGetApiVVersionPassengerUserIdIdRequest(server string, version string, userId string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v%s/Passenger/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiVVersionPassengerUserIdIdRequest calls the generic PutApiVVersionPassengerUserIdId builder with application/json body
func NewPutApiVVersionPassengerUserIdIdRequest(server string, version string, userId string, id openapi_types.UUID, body PutApiVVersionPassengerUserIdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiVVersionPassengerUserIdIdRequestWithBody(server, version, userId, id, "application/json", bodyReader)
}

// NewPutApiVVersionPassengerUserIdIdRequestWithBody generates requests for PutApiVVersionPassengerUserIdId with any type of body
func NewPutApiVVersionPassengerUserIdIdRequestWithBody(server string, version string, userId string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v%s/Passenger/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutApiVVersionScheduleBulkRequest calls the generic PutApiVVersionScheduleBulk builder with application/json body
func NewPutApiVVersionScheduleBulkRequest(server string, version string, body PutApiVVersionScheduleBulkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiVVersionScheduleBulkRequestWithBody(server, version, "application/json", bodyReader)
}

// NewPutApiVVersionScheduleBulkRequestWithBody generates requests for PutApiVVersionScheduleBulk with any type of body
func NewPutApiVVersionScheduleBulkRequestWithBody(server string, version string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v%s/Schedule/bulk", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiVVersionScheduleLatestRequest generates requests for GetApiVVersionScheduleLatest
func NewGetApiVVersionScheduleLatestRequest(server string, version string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v%s/Schedule/latest", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiVVersionScheduleRangeFromToRequest generates requests for GetApiVVersionScheduleRangeFromTo
func NewGetApiVVersionScheduleRangeFromToRequest(server string, version string, from string, to string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "From", runtime.ParamLocationPath, from)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "To", runtime.ParamLocationPath, to)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v%s/Schedule/range/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiVVersionScheduleDateRequest generates requests for DeleteApiVVersionScheduleDate
func NewDeleteApiVVersionScheduleDateRequest(server string, version string, date string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "Date", runtime.ParamLocationPath, date)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v%s/Schedule/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiVVersionScheduleDateRequest generates requests for GetApiVVersionScheduleDate
func NewGetApiVVersionScheduleDateRequest(server string, version string, date string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "Date", runtime.ParamLocationPath, date)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v%s/Schedule/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiVVersionScheduleDateRequest calls the generic PutApiVVersionScheduleDate builder with application/json body
func NewPutApiVVersionScheduleDateRequest(server string, version string, date string, body PutApiVVersionScheduleDateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiVVersionScheduleDateRequestWithBody(server, version, date, "application/json", bodyReader)
}

// NewPutApiVVersionScheduleDateRequestWithBody generates requests for PutApiVVersionScheduleDate with any type of body
func NewPutApiVVersionScheduleDateRequestWithBody(server string, version string, date string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "Date", runtime.ParamLocationPath, date)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v%s/Schedule/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiVVersionTimingDirectionRequest generates requests for GetApiVVersionTimingDirection
func NewGetApiVVersionTimingDirectionRequest(server string, version string, direction string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "Direction", runtime.ParamLocationPath, direction)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v%s/Timing/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiVVersionTimingDirectionRequest calls the generic PutApiVVersionTimingDirection builder with application/json body
func NewPutApiVVersionTimingDirectionRequest(server string, version string, direction string, body PutApiVVersionTimingDirectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiVVersionTimingDirectionRequestWithBody(server, version, direction, "application/json", bodyReader)
}

// NewPutApiVVersionTimingDirectionRequestWithBody generates requests for PutApiVVersionTimingDirection with any type of body
func NewPutApiVVersionTimingDirectionRequestWithBody(server string, version string, direction string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "Direction", runtime.ParamLocationPath, direction)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v%s/Timing/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiVVersionUserRequest generates requests for GetApiVVersionUser
func NewGetApiVVersionUserRequest(server string, version string, params *GetApiVVersionUserParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v%s/User", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Username != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Username", runtime.ParamLocationQuery, *params.Username); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Skip != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Skip", runtime.ParamLocationQuery, *params.Skip); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiVVersionUserRequest calls the generic PostApiVVersionUser builder with application/json body
func NewPostApiVVersionUserRequest(server string, version string, body PostApiVVersionUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiVVersionUserRequestWithBody(server, version, "application/json", bodyReader)
}

// NewPostApiVVersionUserRequestWithBody generates requests for PostApiVVersionUser with any type of body
func NewPostApiVVersionUserRequestWithBody(server string, version string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v%s/User", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiVVersionUserMeRequest generates requests for GetApiVVersionUserMe
func NewGetApiVVersionUserMeRequest(server string, version string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v%s/User/Me", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiVVersionUserExistUsernameRequest generates requests for GetApiVVersionUserExistUsername
func NewGetApiVVersionUserExistUsernameRequest(server string, version string, username string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v%s/User/exist/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiVVersionUserUsernameUsernameRequest generates requests for GetApiVVersionUserUsernameUsername
func NewGetApiVVersionUserUsernameUsernameRequest(server string, version string, username string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v%s/User/username/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiVVersionUserIdRequest generates requests for DeleteApiVVersionUserId
func NewDeleteApiVVersionUserIdRequest(server string, version string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v%s/User/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiVVersionUserIdRequest generates requests for GetApiVVersionUserId
func NewGetApiVVersionUserIdRequest(server string, version string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v%s/User/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiVVersionUserIdRequest calls the generic PutApiVVersionUserId builder with application/json body
func NewPutApiVVersionUserIdRequest(server string, version string, id string, body PutApiVVersionUserIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiVVersionUserIdRequestWithBody(server, version, id, "application/json", bodyReader)
}

// NewPutApiVVersionUserIdRequestWithBody generates requests for PutApiVVersionUserId with any type of body
func NewPutApiVVersionUserIdRequestWithBody(server string, version string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v%s/User/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiVVersionErrorInfoRequest generates requests for GetApiVVersionErrorInfo
func NewGetApiVVersionErrorInfoRequest(server string, version string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v%s/error-info", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiVVersionErrorInfoIdRequest generates requests for GetApiVVersionErrorInfoId
func NewGetApiVVersionErrorInfoIdRequest(server string, version string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v%s/error-info/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetWithResponse request
	GetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetResponse, error)

	// GetApiVVersionBookingWithResponse request
	GetApiVVersionBookingWithResponse(ctx context.Context, version string, params *GetApiVVersionBookingParams, reqEditors ...RequestEditorFn) (*GetApiVVersionBookingResponse, error)

	// PostApiVVersionBookingBuyingIdWithResponse request
	PostApiVVersionBookingBuyingIdWithResponse(ctx context.Context, version string, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*PostApiVVersionBookingBuyingIdResponse, error)

	// PostApiVVersionBookingBypassUserIdWithBodyWithResponse request with any body
	PostApiVVersionBookingBypassUserIdWithBodyWithResponse(ctx context.Context, version string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiVVersionBookingBypassUserIdResponse, error)

	PostApiVVersionBookingBypassUserIdWithResponse(ctx context.Context, version string, userId string, body PostApiVVersionBookingBypassUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiVVersionBookingBypassUserIdResponse, error)

	// PostApiVVersionBookingCancelBypassIdWithResponse request
	PostApiVVersionBookingCancelBypassIdWithResponse(ctx context.Context, version string, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*PostApiVVersionBookingCancelBypassIdResponse, error)

	// PostApiVVersionBookingCompleteIdWithBodyWithResponse request with any body
	PostApiVVersionBookingCompleteIdWithBodyWithResponse(ctx context.Context, version string, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiVVersionBookingCompleteIdResponse, error)

	PostApiVVersionBookingCompleteIdWithResponse(ctx context.Context, version string, id openapi_types.UUID, body PostApiVVersionBookingCompleteIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiVVersionBookingCompleteIdResponse, error)

	// GetApiVVersionBookingCountsWithResponse request
	GetApiVVersionBookingCountsWithResponse(ctx context.Context, version string, reqEditors ...RequestEditorFn) (*GetApiVVersionBookingCountsResponse, error)

	// GetApiVVersionBookingReserveDirectionDateTimeWithResponse request
	GetApiVVersionBookingReserveDirectionDateTimeWithResponse(ctx context.Context, version string, direction string, date string, time string, reqEditors ...RequestEditorFn) (*GetApiVVersionBookingReserveDirectionDateTimeResponse, error)

	// GetApiVVersionBookingUserIdIdWithResponse request
	GetApiVVersionBookingUserIdIdWithResponse(ctx context.Context, version string, userId string, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetApiVVersionBookingUserIdIdResponse, error)

	// GetApiVVersionPassengerWithResponse request
	GetApiVVersionPassengerWithResponse(ctx context.Context, version string, params *GetApiVVersionPassengerParams, reqEditors ...RequestEditorFn) (*GetApiVVersionPassengerResponse, error)

	// PostApiVVersionPassengerUserIdWithBodyWithResponse request with any body
	PostApiVVersionPassengerUserIdWithBodyWithResponse(ctx context.Context, version string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiVVersionPassengerUserIdResponse, error)

	PostApiVVersionPassengerUserIdWithResponse(ctx context.Context, version string, userId string, body PostApiVVersionPassengerUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiVVersionPassengerUserIdResponse, error)

	// DeleteApiVVersionPassengerUserIdIdWithResponse request
	DeleteApiVVersionPassengerUserIdIdWithResponse(ctx context.Context, version string, userId string, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteApiVVersionPassengerUserIdIdResponse, error)

	// GetApiVVersionPassengerUserIdIdWithResponse request
	GetApiVVersionPassengerUserIdIdWithResponse(ctx context.Context, version string, userId string, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetApiVVersionPassengerUserIdIdResponse, error)

	// PutApiVVersionPassengerUserIdIdWithBodyWithResponse request with any body
	PutApiVVersionPassengerUserIdIdWithBodyWithResponse(ctx context.Context, version string, userId string, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiVVersionPassengerUserIdIdResponse, error)

	PutApiVVersionPassengerUserIdIdWithResponse(ctx context.Context, version string, userId string, id openapi_types.UUID, body PutApiVVersionPassengerUserIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiVVersionPassengerUserIdIdResponse, error)

	// PutApiVVersionScheduleBulkWithBodyWithResponse request with any body
	PutApiVVersionScheduleBulkWithBodyWithResponse(ctx context.Context, version string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiVVersionScheduleBulkResponse, error)

	PutApiVVersionScheduleBulkWithResponse(ctx context.Context, version string, body PutApiVVersionScheduleBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiVVersionScheduleBulkResponse, error)

	// GetApiVVersionScheduleLatestWithResponse request
	GetApiVVersionScheduleLatestWithResponse(ctx context.Context, version string, reqEditors ...RequestEditorFn) (*GetApiVVersionScheduleLatestResponse, error)

	// GetApiVVersionScheduleRangeFromToWithResponse request
	GetApiVVersionScheduleRangeFromToWithResponse(ctx context.Context, version string, from string, to string, reqEditors ...RequestEditorFn) (*GetApiVVersionScheduleRangeFromToResponse, error)

	// DeleteApiVVersionScheduleDateWithResponse request
	DeleteApiVVersionScheduleDateWithResponse(ctx context.Context, version string, date string, reqEditors ...RequestEditorFn) (*DeleteApiVVersionScheduleDateResponse, error)

	// GetApiVVersionScheduleDateWithResponse request
	GetApiVVersionScheduleDateWithResponse(ctx context.Context, version string, date string, reqEditors ...RequestEditorFn) (*GetApiVVersionScheduleDateResponse, error)

	// PutApiVVersionScheduleDateWithBodyWithResponse request with any body
	PutApiVVersionScheduleDateWithBodyWithResponse(ctx context.Context, version string, date string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiVVersionScheduleDateResponse, error)

	PutApiVVersionScheduleDateWithResponse(ctx context.Context, version string, date string, body PutApiVVersionScheduleDateJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiVVersionScheduleDateResponse, error)

	// GetApiVVersionTimingDirectionWithResponse request
	GetApiVVersionTimingDirectionWithResponse(ctx context.Context, version string, direction string, reqEditors ...RequestEditorFn) (*GetApiVVersionTimingDirectionResponse, error)

	// PutApiVVersionTimingDirectionWithBodyWithResponse request with any body
	PutApiVVersionTimingDirectionWithBodyWithResponse(ctx context.Context, version string, direction string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiVVersionTimingDirectionResponse, error)

	PutApiVVersionTimingDirectionWithResponse(ctx context.Context, version string, direction string, body PutApiVVersionTimingDirectionJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiVVersionTimingDirectionResponse, error)

	// GetApiVVersionUserWithResponse request
	GetApiVVersionUserWithResponse(ctx context.Context, version string, params *GetApiVVersionUserParams, reqEditors ...RequestEditorFn) (*GetApiVVersionUserResponse, error)

	// PostApiVVersionUserWithBodyWithResponse request with any body
	PostApiVVersionUserWithBodyWithResponse(ctx context.Context, version string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiVVersionUserResponse, error)

	PostApiVVersionUserWithResponse(ctx context.Context, version string, body PostApiVVersionUserJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiVVersionUserResponse, error)

	// GetApiVVersionUserMeWithResponse request
	GetApiVVersionUserMeWithResponse(ctx context.Context, version string, reqEditors ...RequestEditorFn) (*GetApiVVersionUserMeResponse, error)

	// GetApiVVersionUserExistUsernameWithResponse request
	GetApiVVersionUserExistUsernameWithResponse(ctx context.Context, version string, username string, reqEditors ...RequestEditorFn) (*GetApiVVersionUserExistUsernameResponse, error)

	// GetApiVVersionUserUsernameUsernameWithResponse request
	GetApiVVersionUserUsernameUsernameWithResponse(ctx context.Context, version string, username string, reqEditors ...RequestEditorFn) (*GetApiVVersionUserUsernameUsernameResponse, error)

	// DeleteApiVVersionUserIdWithResponse request
	DeleteApiVVersionUserIdWithResponse(ctx context.Context, version string, id string, reqEditors ...RequestEditorFn) (*DeleteApiVVersionUserIdResponse, error)

	// GetApiVVersionUserIdWithResponse request
	GetApiVVersionUserIdWithResponse(ctx context.Context, version string, id string, reqEditors ...RequestEditorFn) (*GetApiVVersionUserIdResponse, error)

	// PutApiVVersionUserIdWithBodyWithResponse request with any body
	PutApiVVersionUserIdWithBodyWithResponse(ctx context.Context, version string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiVVersionUserIdResponse, error)

	PutApiVVersionUserIdWithResponse(ctx context.Context, version string, id string, body PutApiVVersionUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiVVersionUserIdResponse, error)

	// GetApiVVersionErrorInfoWithResponse request
	GetApiVVersionErrorInfoWithResponse(ctx context.Context, version string, reqEditors ...RequestEditorFn) (*GetApiVVersionErrorInfoResponse, error)

	// GetApiVVersionErrorInfoIdWithResponse request
	GetApiVVersionErrorInfoIdWithResponse(ctx context.Context, version string, id string, reqEditors ...RequestEditorFn) (*GetApiVVersionErrorInfoIdResponse, error)
}

type GetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiVVersionBookingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BookingPrincipalRes
}

// Status returns HTTPResponse.Status
func (r GetApiVVersionBookingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiVVersionBookingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiVVersionBookingBuyingIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BookingPrincipalRes
}

// Status returns HTTPResponse.Status
func (r PostApiVVersionBookingBuyingIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiVVersionBookingBuyingIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiVVersionBookingBypassUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BookingPrincipalRes
}

// Status returns HTTPResponse.Status
func (r PostApiVVersionBookingBypassUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiVVersionBookingBypassUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiVVersionBookingCancelBypassIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BookingPrincipalRes
}

// Status returns HTTPResponse.Status
func (r PostApiVVersionBookingCancelBypassIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiVVersionBookingCancelBypassIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiVVersionBookingCompleteIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BookingPrincipalRes
}

// Status returns HTTPResponse.Status
func (r PostApiVVersionBookingCompleteIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiVVersionBookingCompleteIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiVVersionBookingCountsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BookingCountRes
}

// Status returns HTTPResponse.Status
func (r GetApiVVersionBookingCountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiVVersionBookingCountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiVVersionBookingReserveDirectionDateTimeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BookingPrincipalRes
}

// Status returns HTTPResponse.Status
func (r GetApiVVersionBookingReserveDirectionDateTimeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiVVersionBookingReserveDirectionDateTimeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiVVersionBookingUserIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BookingRes
}

// Status returns HTTPResponse.Status
func (r GetApiVVersionBookingUserIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiVVersionBookingUserIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiVVersionPassengerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PassengerPrincipalRes
}

// Status returns HTTPResponse.Status
func (r GetApiVVersionPassengerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiVVersionPassengerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiVVersionPassengerUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PassengerPrincipalRes
}

// Status returns HTTPResponse.Status
func (r PostApiVVersionPassengerUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiVVersionPassengerUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiVVersionPassengerUserIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiVVersionPassengerUserIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiVVersionPassengerUserIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiVVersionPassengerUserIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PassengerRes
}

// Status returns HTTPResponse.Status
func (r GetApiVVersionPassengerUserIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiVVersionPassengerUserIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiVVersionPassengerUserIdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PassengerPrincipalRes
}

// Status returns HTTPResponse.Status
func (r PutApiVVersionPassengerUserIdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiVVersionPassengerUserIdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiVVersionScheduleBulkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutApiVVersionScheduleBulkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiVVersionScheduleBulkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiVVersionScheduleLatestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LatestScheduleRes
}

// Status returns HTTPResponse.Status
func (r GetApiVVersionScheduleLatestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiVVersionScheduleLatestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiVVersionScheduleRangeFromToResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SchedulePrincipalRes
}

// Status returns HTTPResponse.Status
func (r GetApiVVersionScheduleRangeFromToResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiVVersionScheduleRangeFromToResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiVVersionScheduleDateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiVVersionScheduleDateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiVVersionScheduleDateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiVVersionScheduleDateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SchedulePrincipalRes
}

// Status returns HTTPResponse.Status
func (r GetApiVVersionScheduleDateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiVVersionScheduleDateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiVVersionScheduleDateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SchedulePrincipalRes
}

// Status returns HTTPResponse.Status
func (r PutApiVVersionScheduleDateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiVVersionScheduleDateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiVVersionTimingDirectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TimingRes
}

// Status returns HTTPResponse.Status
func (r GetApiVVersionTimingDirectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiVVersionTimingDirectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiVVersionTimingDirectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TimingPrincipalRes
}

// Status returns HTTPResponse.Status
func (r PutApiVVersionTimingDirectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiVVersionTimingDirectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiVVersionUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]UserPrincipalRes
}

// Status returns HTTPResponse.Status
func (r GetApiVVersionUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiVVersionUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiVVersionUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserPrincipalRes
}

// Status returns HTTPResponse.Status
func (r PostApiVVersionUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiVVersionUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiVVersionUserMeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r GetApiVVersionUserMeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiVVersionUserMeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiVVersionUserExistUsernameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserExistRes
}

// Status returns HTTPResponse.Status
func (r GetApiVVersionUserExistUsernameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiVVersionUserExistUsernameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiVVersionUserUsernameUsernameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserRes
}

// Status returns HTTPResponse.Status
func (r GetApiVVersionUserUsernameUsernameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiVVersionUserUsernameUsernameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiVVersionUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiVVersionUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiVVersionUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiVVersionUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserRes
}

// Status returns HTTPResponse.Status
func (r GetApiVVersionUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiVVersionUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiVVersionUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserPrincipalRes
}

// Status returns HTTPResponse.Status
func (r PutApiVVersionUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiVVersionUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiVVersionErrorInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
}

// Status returns HTTPResponse.Status
func (r GetApiVVersionErrorInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiVVersionErrorInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiVVersionErrorInfoIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ErrorInfo
}

// Status returns HTTPResponse.Status
func (r GetApiVVersionErrorInfoIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiVVersionErrorInfoIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetWithResponse request returning *GetResponse
func (c *ClientWithResponses) GetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetResponse, error) {
	rsp, err := c.Get(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetResponse(rsp)
}

// GetApiVVersionBookingWithResponse request returning *GetApiVVersionBookingResponse
func (c *ClientWithResponses) GetApiVVersionBookingWithResponse(ctx context.Context, version string, params *GetApiVVersionBookingParams, reqEditors ...RequestEditorFn) (*GetApiVVersionBookingResponse, error) {
	rsp, err := c.GetApiVVersionBooking(ctx, version, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiVVersionBookingResponse(rsp)
}

// PostApiVVersionBookingBuyingIdWithResponse request returning *PostApiVVersionBookingBuyingIdResponse
func (c *ClientWithResponses) PostApiVVersionBookingBuyingIdWithResponse(ctx context.Context, version string, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*PostApiVVersionBookingBuyingIdResponse, error) {
	rsp, err := c.PostApiVVersionBookingBuyingId(ctx, version, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiVVersionBookingBuyingIdResponse(rsp)
}

// PostApiVVersionBookingBypassUserIdWithBodyWithResponse request with arbitrary body returning *PostApiVVersionBookingBypassUserIdResponse
func (c *ClientWithResponses) PostApiVVersionBookingBypassUserIdWithBodyWithResponse(ctx context.Context, version string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiVVersionBookingBypassUserIdResponse, error) {
	rsp, err := c.PostApiVVersionBookingBypassUserIdWithBody(ctx, version, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiVVersionBookingBypassUserIdResponse(rsp)
}

func (c *ClientWithResponses) PostApiVVersionBookingBypassUserIdWithResponse(ctx context.Context, version string, userId string, body PostApiVVersionBookingBypassUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiVVersionBookingBypassUserIdResponse, error) {
	rsp, err := c.PostApiVVersionBookingBypassUserId(ctx, version, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiVVersionBookingBypassUserIdResponse(rsp)
}

// PostApiVVersionBookingCancelBypassIdWithResponse request returning *PostApiVVersionBookingCancelBypassIdResponse
func (c *ClientWithResponses) PostApiVVersionBookingCancelBypassIdWithResponse(ctx context.Context, version string, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*PostApiVVersionBookingCancelBypassIdResponse, error) {
	rsp, err := c.PostApiVVersionBookingCancelBypassId(ctx, version, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiVVersionBookingCancelBypassIdResponse(rsp)
}

// PostApiVVersionBookingCompleteIdWithBodyWithResponse request with arbitrary body returning *PostApiVVersionBookingCompleteIdResponse
func (c *ClientWithResponses) PostApiVVersionBookingCompleteIdWithBodyWithResponse(ctx context.Context, version string, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiVVersionBookingCompleteIdResponse, error) {
	rsp, err := c.PostApiVVersionBookingCompleteIdWithBody(ctx, version, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiVVersionBookingCompleteIdResponse(rsp)
}

func (c *ClientWithResponses) PostApiVVersionBookingCompleteIdWithResponse(ctx context.Context, version string, id openapi_types.UUID, body PostApiVVersionBookingCompleteIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiVVersionBookingCompleteIdResponse, error) {
	rsp, err := c.PostApiVVersionBookingCompleteId(ctx, version, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiVVersionBookingCompleteIdResponse(rsp)
}

// GetApiVVersionBookingCountsWithResponse request returning *GetApiVVersionBookingCountsResponse
func (c *ClientWithResponses) GetApiVVersionBookingCountsWithResponse(ctx context.Context, version string, reqEditors ...RequestEditorFn) (*GetApiVVersionBookingCountsResponse, error) {
	rsp, err := c.GetApiVVersionBookingCounts(ctx, version, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiVVersionBookingCountsResponse(rsp)
}

// GetApiVVersionBookingReserveDirectionDateTimeWithResponse request returning *GetApiVVersionBookingReserveDirectionDateTimeResponse
func (c *ClientWithResponses) GetApiVVersionBookingReserveDirectionDateTimeWithResponse(ctx context.Context, version string, direction string, date string, time string, reqEditors ...RequestEditorFn) (*GetApiVVersionBookingReserveDirectionDateTimeResponse, error) {
	rsp, err := c.GetApiVVersionBookingReserveDirectionDateTime(ctx, version, direction, date, time, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiVVersionBookingReserveDirectionDateTimeResponse(rsp)
}

// GetApiVVersionBookingUserIdIdWithResponse request returning *GetApiVVersionBookingUserIdIdResponse
func (c *ClientWithResponses) GetApiVVersionBookingUserIdIdWithResponse(ctx context.Context, version string, userId string, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetApiVVersionBookingUserIdIdResponse, error) {
	rsp, err := c.GetApiVVersionBookingUserIdId(ctx, version, userId, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiVVersionBookingUserIdIdResponse(rsp)
}

// GetApiVVersionPassengerWithResponse request returning *GetApiVVersionPassengerResponse
func (c *ClientWithResponses) GetApiVVersionPassengerWithResponse(ctx context.Context, version string, params *GetApiVVersionPassengerParams, reqEditors ...RequestEditorFn) (*GetApiVVersionPassengerResponse, error) {
	rsp, err := c.GetApiVVersionPassenger(ctx, version, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiVVersionPassengerResponse(rsp)
}

// PostApiVVersionPassengerUserIdWithBodyWithResponse request with arbitrary body returning *PostApiVVersionPassengerUserIdResponse
func (c *ClientWithResponses) PostApiVVersionPassengerUserIdWithBodyWithResponse(ctx context.Context, version string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiVVersionPassengerUserIdResponse, error) {
	rsp, err := c.PostApiVVersionPassengerUserIdWithBody(ctx, version, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiVVersionPassengerUserIdResponse(rsp)
}

func (c *ClientWithResponses) PostApiVVersionPassengerUserIdWithResponse(ctx context.Context, version string, userId string, body PostApiVVersionPassengerUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiVVersionPassengerUserIdResponse, error) {
	rsp, err := c.PostApiVVersionPassengerUserId(ctx, version, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiVVersionPassengerUserIdResponse(rsp)
}

// DeleteApiVVersionPassengerUserIdIdWithResponse request returning *DeleteApiVVersionPassengerUserIdIdResponse
func (c *ClientWithResponses) DeleteApiVVersionPassengerUserIdIdWithResponse(ctx context.Context, version string, userId string, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteApiVVersionPassengerUserIdIdResponse, error) {
	rsp, err := c.DeleteApiVVersionPassengerUserIdId(ctx, version, userId, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiVVersionPassengerUserIdIdResponse(rsp)
}

// GetApiVVersionPassengerUserIdIdWithResponse request returning *GetApiVVersionPassengerUserIdIdResponse
func (c *ClientWithResponses) GetApiVVersionPassengerUserIdIdWithResponse(ctx context.Context, version string, userId string, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetApiVVersionPassengerUserIdIdResponse, error) {
	rsp, err := c.GetApiVVersionPassengerUserIdId(ctx, version, userId, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiVVersionPassengerUserIdIdResponse(rsp)
}

// PutApiVVersionPassengerUserIdIdWithBodyWithResponse request with arbitrary body returning *PutApiVVersionPassengerUserIdIdResponse
func (c *ClientWithResponses) PutApiVVersionPassengerUserIdIdWithBodyWithResponse(ctx context.Context, version string, userId string, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiVVersionPassengerUserIdIdResponse, error) {
	rsp, err := c.PutApiVVersionPassengerUserIdIdWithBody(ctx, version, userId, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiVVersionPassengerUserIdIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiVVersionPassengerUserIdIdWithResponse(ctx context.Context, version string, userId string, id openapi_types.UUID, body PutApiVVersionPassengerUserIdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiVVersionPassengerUserIdIdResponse, error) {
	rsp, err := c.PutApiVVersionPassengerUserIdId(ctx, version, userId, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiVVersionPassengerUserIdIdResponse(rsp)
}

// PutApiVVersionScheduleBulkWithBodyWithResponse request with arbitrary body returning *PutApiVVersionScheduleBulkResponse
func (c *ClientWithResponses) PutApiVVersionScheduleBulkWithBodyWithResponse(ctx context.Context, version string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiVVersionScheduleBulkResponse, error) {
	rsp, err := c.PutApiVVersionScheduleBulkWithBody(ctx, version, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiVVersionScheduleBulkResponse(rsp)
}

func (c *ClientWithResponses) PutApiVVersionScheduleBulkWithResponse(ctx context.Context, version string, body PutApiVVersionScheduleBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiVVersionScheduleBulkResponse, error) {
	rsp, err := c.PutApiVVersionScheduleBulk(ctx, version, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiVVersionScheduleBulkResponse(rsp)
}

// GetApiVVersionScheduleLatestWithResponse request returning *GetApiVVersionScheduleLatestResponse
func (c *ClientWithResponses) GetApiVVersionScheduleLatestWithResponse(ctx context.Context, version string, reqEditors ...RequestEditorFn) (*GetApiVVersionScheduleLatestResponse, error) {
	rsp, err := c.GetApiVVersionScheduleLatest(ctx, version, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiVVersionScheduleLatestResponse(rsp)
}

// GetApiVVersionScheduleRangeFromToWithResponse request returning *GetApiVVersionScheduleRangeFromToResponse
func (c *ClientWithResponses) GetApiVVersionScheduleRangeFromToWithResponse(ctx context.Context, version string, from string, to string, reqEditors ...RequestEditorFn) (*GetApiVVersionScheduleRangeFromToResponse, error) {
	rsp, err := c.GetApiVVersionScheduleRangeFromTo(ctx, version, from, to, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiVVersionScheduleRangeFromToResponse(rsp)
}

// DeleteApiVVersionScheduleDateWithResponse request returning *DeleteApiVVersionScheduleDateResponse
func (c *ClientWithResponses) DeleteApiVVersionScheduleDateWithResponse(ctx context.Context, version string, date string, reqEditors ...RequestEditorFn) (*DeleteApiVVersionScheduleDateResponse, error) {
	rsp, err := c.DeleteApiVVersionScheduleDate(ctx, version, date, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiVVersionScheduleDateResponse(rsp)
}

// GetApiVVersionScheduleDateWithResponse request returning *GetApiVVersionScheduleDateResponse
func (c *ClientWithResponses) GetApiVVersionScheduleDateWithResponse(ctx context.Context, version string, date string, reqEditors ...RequestEditorFn) (*GetApiVVersionScheduleDateResponse, error) {
	rsp, err := c.GetApiVVersionScheduleDate(ctx, version, date, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiVVersionScheduleDateResponse(rsp)
}

// PutApiVVersionScheduleDateWithBodyWithResponse request with arbitrary body returning *PutApiVVersionScheduleDateResponse
func (c *ClientWithResponses) PutApiVVersionScheduleDateWithBodyWithResponse(ctx context.Context, version string, date string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiVVersionScheduleDateResponse, error) {
	rsp, err := c.PutApiVVersionScheduleDateWithBody(ctx, version, date, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiVVersionScheduleDateResponse(rsp)
}

func (c *ClientWithResponses) PutApiVVersionScheduleDateWithResponse(ctx context.Context, version string, date string, body PutApiVVersionScheduleDateJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiVVersionScheduleDateResponse, error) {
	rsp, err := c.PutApiVVersionScheduleDate(ctx, version, date, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiVVersionScheduleDateResponse(rsp)
}

// GetApiVVersionTimingDirectionWithResponse request returning *GetApiVVersionTimingDirectionResponse
func (c *ClientWithResponses) GetApiVVersionTimingDirectionWithResponse(ctx context.Context, version string, direction string, reqEditors ...RequestEditorFn) (*GetApiVVersionTimingDirectionResponse, error) {
	rsp, err := c.GetApiVVersionTimingDirection(ctx, version, direction, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiVVersionTimingDirectionResponse(rsp)
}

// PutApiVVersionTimingDirectionWithBodyWithResponse request with arbitrary body returning *PutApiVVersionTimingDirectionResponse
func (c *ClientWithResponses) PutApiVVersionTimingDirectionWithBodyWithResponse(ctx context.Context, version string, direction string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiVVersionTimingDirectionResponse, error) {
	rsp, err := c.PutApiVVersionTimingDirectionWithBody(ctx, version, direction, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiVVersionTimingDirectionResponse(rsp)
}

func (c *ClientWithResponses) PutApiVVersionTimingDirectionWithResponse(ctx context.Context, version string, direction string, body PutApiVVersionTimingDirectionJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiVVersionTimingDirectionResponse, error) {
	rsp, err := c.PutApiVVersionTimingDirection(ctx, version, direction, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiVVersionTimingDirectionResponse(rsp)
}

// GetApiVVersionUserWithResponse request returning *GetApiVVersionUserResponse
func (c *ClientWithResponses) GetApiVVersionUserWithResponse(ctx context.Context, version string, params *GetApiVVersionUserParams, reqEditors ...RequestEditorFn) (*GetApiVVersionUserResponse, error) {
	rsp, err := c.GetApiVVersionUser(ctx, version, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiVVersionUserResponse(rsp)
}

// PostApiVVersionUserWithBodyWithResponse request with arbitrary body returning *PostApiVVersionUserResponse
func (c *ClientWithResponses) PostApiVVersionUserWithBodyWithResponse(ctx context.Context, version string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiVVersionUserResponse, error) {
	rsp, err := c.PostApiVVersionUserWithBody(ctx, version, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiVVersionUserResponse(rsp)
}

func (c *ClientWithResponses) PostApiVVersionUserWithResponse(ctx context.Context, version string, body PostApiVVersionUserJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiVVersionUserResponse, error) {
	rsp, err := c.PostApiVVersionUser(ctx, version, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiVVersionUserResponse(rsp)
}

// GetApiVVersionUserMeWithResponse request returning *GetApiVVersionUserMeResponse
func (c *ClientWithResponses) GetApiVVersionUserMeWithResponse(ctx context.Context, version string, reqEditors ...RequestEditorFn) (*GetApiVVersionUserMeResponse, error) {
	rsp, err := c.GetApiVVersionUserMe(ctx, version, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiVVersionUserMeResponse(rsp)
}

// GetApiVVersionUserExistUsernameWithResponse request returning *GetApiVVersionUserExistUsernameResponse
func (c *ClientWithResponses) GetApiVVersionUserExistUsernameWithResponse(ctx context.Context, version string, username string, reqEditors ...RequestEditorFn) (*GetApiVVersionUserExistUsernameResponse, error) {
	rsp, err := c.GetApiVVersionUserExistUsername(ctx, version, username, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiVVersionUserExistUsernameResponse(rsp)
}

// GetApiVVersionUserUsernameUsernameWithResponse request returning *GetApiVVersionUserUsernameUsernameResponse
func (c *ClientWithResponses) GetApiVVersionUserUsernameUsernameWithResponse(ctx context.Context, version string, username string, reqEditors ...RequestEditorFn) (*GetApiVVersionUserUsernameUsernameResponse, error) {
	rsp, err := c.GetApiVVersionUserUsernameUsername(ctx, version, username, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiVVersionUserUsernameUsernameResponse(rsp)
}

// DeleteApiVVersionUserIdWithResponse request returning *DeleteApiVVersionUserIdResponse
func (c *ClientWithResponses) DeleteApiVVersionUserIdWithResponse(ctx context.Context, version string, id string, reqEditors ...RequestEditorFn) (*DeleteApiVVersionUserIdResponse, error) {
	rsp, err := c.DeleteApiVVersionUserId(ctx, version, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiVVersionUserIdResponse(rsp)
}

// GetApiVVersionUserIdWithResponse request returning *GetApiVVersionUserIdResponse
func (c *ClientWithResponses) GetApiVVersionUserIdWithResponse(ctx context.Context, version string, id string, reqEditors ...RequestEditorFn) (*GetApiVVersionUserIdResponse, error) {
	rsp, err := c.GetApiVVersionUserId(ctx, version, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiVVersionUserIdResponse(rsp)
}

// PutApiVVersionUserIdWithBodyWithResponse request with arbitrary body returning *PutApiVVersionUserIdResponse
func (c *ClientWithResponses) PutApiVVersionUserIdWithBodyWithResponse(ctx context.Context, version string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiVVersionUserIdResponse, error) {
	rsp, err := c.PutApiVVersionUserIdWithBody(ctx, version, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiVVersionUserIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiVVersionUserIdWithResponse(ctx context.Context, version string, id string, body PutApiVVersionUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiVVersionUserIdResponse, error) {
	rsp, err := c.PutApiVVersionUserId(ctx, version, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiVVersionUserIdResponse(rsp)
}

// GetApiVVersionErrorInfoWithResponse request returning *GetApiVVersionErrorInfoResponse
func (c *ClientWithResponses) GetApiVVersionErrorInfoWithResponse(ctx context.Context, version string, reqEditors ...RequestEditorFn) (*GetApiVVersionErrorInfoResponse, error) {
	rsp, err := c.GetApiVVersionErrorInfo(ctx, version, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiVVersionErrorInfoResponse(rsp)
}

// GetApiVVersionErrorInfoIdWithResponse request returning *GetApiVVersionErrorInfoIdResponse
func (c *ClientWithResponses) GetApiVVersionErrorInfoIdWithResponse(ctx context.Context, version string, id string, reqEditors ...RequestEditorFn) (*GetApiVVersionErrorInfoIdResponse, error) {
	rsp, err := c.GetApiVVersionErrorInfoId(ctx, version, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiVVersionErrorInfoIdResponse(rsp)
}

// ParseGetResponse parses an HTTP response from a GetWithResponse call
func ParseGetResponse(rsp *http.Response) (*GetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiVVersionBookingResponse parses an HTTP response from a GetApiVVersionBookingWithResponse call
func ParseGetApiVVersionBookingResponse(rsp *http.Response) (*GetApiVVersionBookingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiVVersionBookingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BookingPrincipalRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostApiVVersionBookingBuyingIdResponse parses an HTTP response from a PostApiVVersionBookingBuyingIdWithResponse call
func ParsePostApiVVersionBookingBuyingIdResponse(rsp *http.Response) (*PostApiVVersionBookingBuyingIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiVVersionBookingBuyingIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BookingPrincipalRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostApiVVersionBookingBypassUserIdResponse parses an HTTP response from a PostApiVVersionBookingBypassUserIdWithResponse call
func ParsePostApiVVersionBookingBypassUserIdResponse(rsp *http.Response) (*PostApiVVersionBookingBypassUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiVVersionBookingBypassUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BookingPrincipalRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostApiVVersionBookingCancelBypassIdResponse parses an HTTP response from a PostApiVVersionBookingCancelBypassIdWithResponse call
func ParsePostApiVVersionBookingCancelBypassIdResponse(rsp *http.Response) (*PostApiVVersionBookingCancelBypassIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiVVersionBookingCancelBypassIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BookingPrincipalRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostApiVVersionBookingCompleteIdResponse parses an HTTP response from a PostApiVVersionBookingCompleteIdWithResponse call
func ParsePostApiVVersionBookingCompleteIdResponse(rsp *http.Response) (*PostApiVVersionBookingCompleteIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiVVersionBookingCompleteIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BookingPrincipalRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiVVersionBookingCountsResponse parses an HTTP response from a GetApiVVersionBookingCountsWithResponse call
func ParseGetApiVVersionBookingCountsResponse(rsp *http.Response) (*GetApiVVersionBookingCountsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiVVersionBookingCountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BookingCountRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiVVersionBookingReserveDirectionDateTimeResponse parses an HTTP response from a GetApiVVersionBookingReserveDirectionDateTimeWithResponse call
func ParseGetApiVVersionBookingReserveDirectionDateTimeResponse(rsp *http.Response) (*GetApiVVersionBookingReserveDirectionDateTimeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiVVersionBookingReserveDirectionDateTimeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BookingPrincipalRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiVVersionBookingUserIdIdResponse parses an HTTP response from a GetApiVVersionBookingUserIdIdWithResponse call
func ParseGetApiVVersionBookingUserIdIdResponse(rsp *http.Response) (*GetApiVVersionBookingUserIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiVVersionBookingUserIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BookingRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiVVersionPassengerResponse parses an HTTP response from a GetApiVVersionPassengerWithResponse call
func ParseGetApiVVersionPassengerResponse(rsp *http.Response) (*GetApiVVersionPassengerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiVVersionPassengerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PassengerPrincipalRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostApiVVersionPassengerUserIdResponse parses an HTTP response from a PostApiVVersionPassengerUserIdWithResponse call
func ParsePostApiVVersionPassengerUserIdResponse(rsp *http.Response) (*PostApiVVersionPassengerUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiVVersionPassengerUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PassengerPrincipalRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseDeleteApiVVersionPassengerUserIdIdResponse parses an HTTP response from a DeleteApiVVersionPassengerUserIdIdWithResponse call
func ParseDeleteApiVVersionPassengerUserIdIdResponse(rsp *http.Response) (*DeleteApiVVersionPassengerUserIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiVVersionPassengerUserIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiVVersionPassengerUserIdIdResponse parses an HTTP response from a GetApiVVersionPassengerUserIdIdWithResponse call
func ParseGetApiVVersionPassengerUserIdIdResponse(rsp *http.Response) (*GetApiVVersionPassengerUserIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiVVersionPassengerUserIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PassengerRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutApiVVersionPassengerUserIdIdResponse parses an HTTP response from a PutApiVVersionPassengerUserIdIdWithResponse call
func ParsePutApiVVersionPassengerUserIdIdResponse(rsp *http.Response) (*PutApiVVersionPassengerUserIdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiVVersionPassengerUserIdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PassengerPrincipalRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutApiVVersionScheduleBulkResponse parses an HTTP response from a PutApiVVersionScheduleBulkWithResponse call
func ParsePutApiVVersionScheduleBulkResponse(rsp *http.Response) (*PutApiVVersionScheduleBulkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiVVersionScheduleBulkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiVVersionScheduleLatestResponse parses an HTTP response from a GetApiVVersionScheduleLatestWithResponse call
func ParseGetApiVVersionScheduleLatestResponse(rsp *http.Response) (*GetApiVVersionScheduleLatestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiVVersionScheduleLatestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LatestScheduleRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiVVersionScheduleRangeFromToResponse parses an HTTP response from a GetApiVVersionScheduleRangeFromToWithResponse call
func ParseGetApiVVersionScheduleRangeFromToResponse(rsp *http.Response) (*GetApiVVersionScheduleRangeFromToResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiVVersionScheduleRangeFromToResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SchedulePrincipalRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseDeleteApiVVersionScheduleDateResponse parses an HTTP response from a DeleteApiVVersionScheduleDateWithResponse call
func ParseDeleteApiVVersionScheduleDateResponse(rsp *http.Response) (*DeleteApiVVersionScheduleDateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiVVersionScheduleDateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiVVersionScheduleDateResponse parses an HTTP response from a GetApiVVersionScheduleDateWithResponse call
func ParseGetApiVVersionScheduleDateResponse(rsp *http.Response) (*GetApiVVersionScheduleDateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiVVersionScheduleDateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SchedulePrincipalRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutApiVVersionScheduleDateResponse parses an HTTP response from a PutApiVVersionScheduleDateWithResponse call
func ParsePutApiVVersionScheduleDateResponse(rsp *http.Response) (*PutApiVVersionScheduleDateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiVVersionScheduleDateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SchedulePrincipalRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiVVersionTimingDirectionResponse parses an HTTP response from a GetApiVVersionTimingDirectionWithResponse call
func ParseGetApiVVersionTimingDirectionResponse(rsp *http.Response) (*GetApiVVersionTimingDirectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiVVersionTimingDirectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TimingRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutApiVVersionTimingDirectionResponse parses an HTTP response from a PutApiVVersionTimingDirectionWithResponse call
func ParsePutApiVVersionTimingDirectionResponse(rsp *http.Response) (*PutApiVVersionTimingDirectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiVVersionTimingDirectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TimingPrincipalRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiVVersionUserResponse parses an HTTP response from a GetApiVVersionUserWithResponse call
func ParseGetApiVVersionUserResponse(rsp *http.Response) (*GetApiVVersionUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiVVersionUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []UserPrincipalRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostApiVVersionUserResponse parses an HTTP response from a PostApiVVersionUserWithResponse call
func ParsePostApiVVersionUserResponse(rsp *http.Response) (*PostApiVVersionUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiVVersionUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserPrincipalRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiVVersionUserMeResponse parses an HTTP response from a GetApiVVersionUserMeWithResponse call
func ParseGetApiVVersionUserMeResponse(rsp *http.Response) (*GetApiVVersionUserMeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiVVersionUserMeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiVVersionUserExistUsernameResponse parses an HTTP response from a GetApiVVersionUserExistUsernameWithResponse call
func ParseGetApiVVersionUserExistUsernameResponse(rsp *http.Response) (*GetApiVVersionUserExistUsernameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiVVersionUserExistUsernameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserExistRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiVVersionUserUsernameUsernameResponse parses an HTTP response from a GetApiVVersionUserUsernameUsernameWithResponse call
func ParseGetApiVVersionUserUsernameUsernameResponse(rsp *http.Response) (*GetApiVVersionUserUsernameUsernameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiVVersionUserUsernameUsernameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseDeleteApiVVersionUserIdResponse parses an HTTP response from a DeleteApiVVersionUserIdWithResponse call
func ParseDeleteApiVVersionUserIdResponse(rsp *http.Response) (*DeleteApiVVersionUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiVVersionUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiVVersionUserIdResponse parses an HTTP response from a GetApiVVersionUserIdWithResponse call
func ParseGetApiVVersionUserIdResponse(rsp *http.Response) (*GetApiVVersionUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiVVersionUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutApiVVersionUserIdResponse parses an HTTP response from a PutApiVVersionUserIdWithResponse call
func ParsePutApiVVersionUserIdResponse(rsp *http.Response) (*PutApiVVersionUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiVVersionUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserPrincipalRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiVVersionErrorInfoResponse parses an HTTP response from a GetApiVVersionErrorInfoWithResponse call
func ParseGetApiVVersionErrorInfoResponse(rsp *http.Response) (*GetApiVVersionErrorInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiVVersionErrorInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiVVersionErrorInfoIdResponse parses an HTTP response from a GetApiVVersionErrorInfoIdWithResponse call
func ParseGetApiVVersionErrorInfoIdResponse(rsp *http.Response) (*GetApiVVersionErrorInfoIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiVVersionErrorInfoIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ErrorInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /)
	Get(ctx echo.Context) error

	// (GET /api/v{version}/Booking)
	GetApiVVersionBooking(ctx echo.Context, version string, params GetApiVVersionBookingParams) error

	// (POST /api/v{version}/Booking/buying/{id})
	PostApiVVersionBookingBuyingId(ctx echo.Context, version string, id openapi_types.UUID) error

	// (POST /api/v{version}/Booking/bypass/{userId})
	PostApiVVersionBookingBypassUserId(ctx echo.Context, version string, userId string) error

	// (POST /api/v{version}/Booking/cancel/bypass/{id})
	PostApiVVersionBookingCancelBypassId(ctx echo.Context, version string, id openapi_types.UUID) error

	// (POST /api/v{version}/Booking/complete/{id})
	PostApiVVersionBookingCompleteId(ctx echo.Context, version string, id openapi_types.UUID) error

	// (GET /api/v{version}/Booking/counts)
	GetApiVVersionBookingCounts(ctx echo.Context, version string) error

	// (GET /api/v{version}/Booking/reserve/{Direction}/{Date}/{Time})
	GetApiVVersionBookingReserveDirectionDateTime(ctx echo.Context, version string, direction string, date string, time string) error

	// (GET /api/v{version}/Booking/{userId}/{id})
	GetApiVVersionBookingUserIdId(ctx echo.Context, version string, userId string, id openapi_types.UUID) error

	// (GET /api/v{version}/Passenger)
	GetApiVVersionPassenger(ctx echo.Context, version string, params GetApiVVersionPassengerParams) error

	// (POST /api/v{version}/Passenger/{userId})
	PostApiVVersionPassengerUserId(ctx echo.Context, version string, userId string) error

	// (DELETE /api/v{version}/Passenger/{userId}/{id})
	DeleteApiVVersionPassengerUserIdId(ctx echo.Context, version string, userId string, id openapi_types.UUID) error

	// (GET /api/v{version}/Passenger/{userId}/{id})
	GetApiVVersionPassengerUserIdId(ctx echo.Context, version string, userId string, id openapi_types.UUID) error

	// (PUT /api/v{version}/Passenger/{userId}/{id})
	PutApiVVersionPassengerUserIdId(ctx echo.Context, version string, userId string, id openapi_types.UUID) error

	// (PUT /api/v{version}/Schedule/bulk)
	PutApiVVersionScheduleBulk(ctx echo.Context, version string) error

	// (GET /api/v{version}/Schedule/latest)
	GetApiVVersionScheduleLatest(ctx echo.Context, version string) error

	// (GET /api/v{version}/Schedule/range/{From}/{To})
	GetApiVVersionScheduleRangeFromTo(ctx echo.Context, version string, from string, to string) error

	// (DELETE /api/v{version}/Schedule/{Date})
	DeleteApiVVersionScheduleDate(ctx echo.Context, version string, date string) error

	// (GET /api/v{version}/Schedule/{Date})
	GetApiVVersionScheduleDate(ctx echo.Context, version string, date string) error

	// (PUT /api/v{version}/Schedule/{Date})
	PutApiVVersionScheduleDate(ctx echo.Context, version string, date string) error

	// (GET /api/v{version}/Timing/{Direction})
	GetApiVVersionTimingDirection(ctx echo.Context, version string, direction string) error

	// (PUT /api/v{version}/Timing/{Direction})
	PutApiVVersionTimingDirection(ctx echo.Context, version string, direction string) error

	// (GET /api/v{version}/User)
	GetApiVVersionUser(ctx echo.Context, version string, params GetApiVVersionUserParams) error

	// (POST /api/v{version}/User)
	PostApiVVersionUser(ctx echo.Context, version string) error

	// (GET /api/v{version}/User/Me)
	GetApiVVersionUserMe(ctx echo.Context, version string) error

	// (GET /api/v{version}/User/exist/{username})
	GetApiVVersionUserExistUsername(ctx echo.Context, version string, username string) error

	// (GET /api/v{version}/User/username/{username})
	GetApiVVersionUserUsernameUsername(ctx echo.Context, version string, username string) error

	// (DELETE /api/v{version}/User/{id})
	DeleteApiVVersionUserId(ctx echo.Context, version string, id string) error

	// (GET /api/v{version}/User/{id})
	GetApiVVersionUserId(ctx echo.Context, version string, id string) error

	// (PUT /api/v{version}/User/{id})
	PutApiVVersionUserId(ctx echo.Context, version string, id string) error

	// (GET /api/v{version}/error-info)
	GetApiVVersionErrorInfo(ctx echo.Context, version string) error

	// (GET /api/v{version}/error-info/{id})
	GetApiVVersionErrorInfoId(ctx echo.Context, version string, id string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Get converts echo context to params.
func (w *ServerInterfaceWrapper) Get(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Get(ctx)
	return err
}

// GetApiVVersionBooking converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiVVersionBooking(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameterWithLocation("simple", false, "version", runtime.ParamLocationPath, ctx.Param("version"), &version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiVVersionBookingParams
	// ------------- Optional query parameter "Date" -------------

	err = runtime.BindQueryParameter("form", true, false, "Date", ctx.QueryParams(), &params.Date)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Date: %s", err))
	}

	// ------------- Optional query parameter "Direction" -------------

	err = runtime.BindQueryParameter("form", true, false, "Direction", ctx.QueryParams(), &params.Direction)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Direction: %s", err))
	}

	// ------------- Optional query parameter "Time" -------------

	err = runtime.BindQueryParameter("form", true, false, "Time", ctx.QueryParams(), &params.Time)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Time: %s", err))
	}

	// ------------- Optional query parameter "UserId" -------------

	err = runtime.BindQueryParameter("form", true, false, "UserId", ctx.QueryParams(), &params.UserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UserId: %s", err))
	}

	// ------------- Optional query parameter "Limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "Limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Limit: %s", err))
	}

	// ------------- Optional query parameter "Skip" -------------

	err = runtime.BindQueryParameter("form", true, false, "Skip", ctx.QueryParams(), &params.Skip)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Skip: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiVVersionBooking(ctx, version, params)
	return err
}

// PostApiVVersionBookingBuyingId converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiVVersionBookingBuyingId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameterWithLocation("simple", false, "version", runtime.ParamLocationPath, ctx.Param("version"), &version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostApiVVersionBookingBuyingId(ctx, version, id)
	return err
}

// PostApiVVersionBookingBypassUserId converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiVVersionBookingBypassUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameterWithLocation("simple", false, "version", runtime.ParamLocationPath, ctx.Param("version"), &version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostApiVVersionBookingBypassUserId(ctx, version, userId)
	return err
}

// PostApiVVersionBookingCancelBypassId converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiVVersionBookingCancelBypassId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameterWithLocation("simple", false, "version", runtime.ParamLocationPath, ctx.Param("version"), &version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostApiVVersionBookingCancelBypassId(ctx, version, id)
	return err
}

// PostApiVVersionBookingCompleteId converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiVVersionBookingCompleteId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameterWithLocation("simple", false, "version", runtime.ParamLocationPath, ctx.Param("version"), &version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostApiVVersionBookingCompleteId(ctx, version, id)
	return err
}

// GetApiVVersionBookingCounts converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiVVersionBookingCounts(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameterWithLocation("simple", false, "version", runtime.ParamLocationPath, ctx.Param("version"), &version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiVVersionBookingCounts(ctx, version)
	return err
}

// GetApiVVersionBookingReserveDirectionDateTime converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiVVersionBookingReserveDirectionDateTime(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameterWithLocation("simple", false, "version", runtime.ParamLocationPath, ctx.Param("version"), &version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// ------------- Path parameter "Direction" -------------
	var direction string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Direction", runtime.ParamLocationPath, ctx.Param("Direction"), &direction)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Direction: %s", err))
	}

	// ------------- Path parameter "Date" -------------
	var date string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Date", runtime.ParamLocationPath, ctx.Param("Date"), &date)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Date: %s", err))
	}

	// ------------- Path parameter "Time" -------------
	var time string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Time", runtime.ParamLocationPath, ctx.Param("Time"), &time)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Time: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiVVersionBookingReserveDirectionDateTime(ctx, version, direction, date, time)
	return err
}

// GetApiVVersionBookingUserIdId converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiVVersionBookingUserIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameterWithLocation("simple", false, "version", runtime.ParamLocationPath, ctx.Param("version"), &version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiVVersionBookingUserIdId(ctx, version, userId, id)
	return err
}

// GetApiVVersionPassenger converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiVVersionPassenger(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameterWithLocation("simple", false, "version", runtime.ParamLocationPath, ctx.Param("version"), &version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiVVersionPassengerParams
	// ------------- Optional query parameter "UserId" -------------

	err = runtime.BindQueryParameter("form", true, false, "UserId", ctx.QueryParams(), &params.UserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UserId: %s", err))
	}

	// ------------- Optional query parameter "Name" -------------

	err = runtime.BindQueryParameter("form", true, false, "Name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Name: %s", err))
	}

	// ------------- Optional query parameter "Limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "Limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Limit: %s", err))
	}

	// ------------- Optional query parameter "Skip" -------------

	err = runtime.BindQueryParameter("form", true, false, "Skip", ctx.QueryParams(), &params.Skip)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Skip: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiVVersionPassenger(ctx, version, params)
	return err
}

// PostApiVVersionPassengerUserId converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiVVersionPassengerUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameterWithLocation("simple", false, "version", runtime.ParamLocationPath, ctx.Param("version"), &version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostApiVVersionPassengerUserId(ctx, version, userId)
	return err
}

// DeleteApiVVersionPassengerUserIdId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteApiVVersionPassengerUserIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameterWithLocation("simple", false, "version", runtime.ParamLocationPath, ctx.Param("version"), &version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteApiVVersionPassengerUserIdId(ctx, version, userId, id)
	return err
}

// GetApiVVersionPassengerUserIdId converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiVVersionPassengerUserIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameterWithLocation("simple", false, "version", runtime.ParamLocationPath, ctx.Param("version"), &version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiVVersionPassengerUserIdId(ctx, version, userId, id)
	return err
}

// PutApiVVersionPassengerUserIdId converts echo context to params.
func (w *ServerInterfaceWrapper) PutApiVVersionPassengerUserIdId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameterWithLocation("simple", false, "version", runtime.ParamLocationPath, ctx.Param("version"), &version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutApiVVersionPassengerUserIdId(ctx, version, userId, id)
	return err
}

// PutApiVVersionScheduleBulk converts echo context to params.
func (w *ServerInterfaceWrapper) PutApiVVersionScheduleBulk(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameterWithLocation("simple", false, "version", runtime.ParamLocationPath, ctx.Param("version"), &version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutApiVVersionScheduleBulk(ctx, version)
	return err
}

// GetApiVVersionScheduleLatest converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiVVersionScheduleLatest(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameterWithLocation("simple", false, "version", runtime.ParamLocationPath, ctx.Param("version"), &version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiVVersionScheduleLatest(ctx, version)
	return err
}

// GetApiVVersionScheduleRangeFromTo converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiVVersionScheduleRangeFromTo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameterWithLocation("simple", false, "version", runtime.ParamLocationPath, ctx.Param("version"), &version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// ------------- Path parameter "From" -------------
	var from string

	err = runtime.BindStyledParameterWithLocation("simple", false, "From", runtime.ParamLocationPath, ctx.Param("From"), &from)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter From: %s", err))
	}

	// ------------- Path parameter "To" -------------
	var to string

	err = runtime.BindStyledParameterWithLocation("simple", false, "To", runtime.ParamLocationPath, ctx.Param("To"), &to)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter To: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiVVersionScheduleRangeFromTo(ctx, version, from, to)
	return err
}

// DeleteApiVVersionScheduleDate converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteApiVVersionScheduleDate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameterWithLocation("simple", false, "version", runtime.ParamLocationPath, ctx.Param("version"), &version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// ------------- Path parameter "Date" -------------
	var date string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Date", runtime.ParamLocationPath, ctx.Param("Date"), &date)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Date: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteApiVVersionScheduleDate(ctx, version, date)
	return err
}

// GetApiVVersionScheduleDate converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiVVersionScheduleDate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameterWithLocation("simple", false, "version", runtime.ParamLocationPath, ctx.Param("version"), &version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// ------------- Path parameter "Date" -------------
	var date string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Date", runtime.ParamLocationPath, ctx.Param("Date"), &date)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Date: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiVVersionScheduleDate(ctx, version, date)
	return err
}

// PutApiVVersionScheduleDate converts echo context to params.
func (w *ServerInterfaceWrapper) PutApiVVersionScheduleDate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameterWithLocation("simple", false, "version", runtime.ParamLocationPath, ctx.Param("version"), &version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// ------------- Path parameter "Date" -------------
	var date string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Date", runtime.ParamLocationPath, ctx.Param("Date"), &date)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Date: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutApiVVersionScheduleDate(ctx, version, date)
	return err
}

// GetApiVVersionTimingDirection converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiVVersionTimingDirection(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameterWithLocation("simple", false, "version", runtime.ParamLocationPath, ctx.Param("version"), &version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// ------------- Path parameter "Direction" -------------
	var direction string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Direction", runtime.ParamLocationPath, ctx.Param("Direction"), &direction)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Direction: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiVVersionTimingDirection(ctx, version, direction)
	return err
}

// PutApiVVersionTimingDirection converts echo context to params.
func (w *ServerInterfaceWrapper) PutApiVVersionTimingDirection(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameterWithLocation("simple", false, "version", runtime.ParamLocationPath, ctx.Param("version"), &version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// ------------- Path parameter "Direction" -------------
	var direction string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Direction", runtime.ParamLocationPath, ctx.Param("Direction"), &direction)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Direction: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutApiVVersionTimingDirection(ctx, version, direction)
	return err
}

// GetApiVVersionUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiVVersionUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameterWithLocation("simple", false, "version", runtime.ParamLocationPath, ctx.Param("version"), &version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiVVersionUserParams
	// ------------- Optional query parameter "Id" -------------

	err = runtime.BindQueryParameter("form", true, false, "Id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Id: %s", err))
	}

	// ------------- Optional query parameter "Username" -------------

	err = runtime.BindQueryParameter("form", true, false, "Username", ctx.QueryParams(), &params.Username)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Username: %s", err))
	}

	// ------------- Optional query parameter "Limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "Limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Limit: %s", err))
	}

	// ------------- Optional query parameter "Skip" -------------

	err = runtime.BindQueryParameter("form", true, false, "Skip", ctx.QueryParams(), &params.Skip)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Skip: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiVVersionUser(ctx, version, params)
	return err
}

// PostApiVVersionUser converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiVVersionUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameterWithLocation("simple", false, "version", runtime.ParamLocationPath, ctx.Param("version"), &version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostApiVVersionUser(ctx, version)
	return err
}

// GetApiVVersionUserMe converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiVVersionUserMe(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameterWithLocation("simple", false, "version", runtime.ParamLocationPath, ctx.Param("version"), &version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiVVersionUserMe(ctx, version)
	return err
}

// GetApiVVersionUserExistUsername converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiVVersionUserExistUsername(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameterWithLocation("simple", false, "version", runtime.ParamLocationPath, ctx.Param("version"), &version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// ------------- Path parameter "username" -------------
	var username string

	err = runtime.BindStyledParameterWithLocation("simple", false, "username", runtime.ParamLocationPath, ctx.Param("username"), &username)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter username: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiVVersionUserExistUsername(ctx, version, username)
	return err
}

// GetApiVVersionUserUsernameUsername converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiVVersionUserUsernameUsername(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameterWithLocation("simple", false, "version", runtime.ParamLocationPath, ctx.Param("version"), &version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// ------------- Path parameter "username" -------------
	var username string

	err = runtime.BindStyledParameterWithLocation("simple", false, "username", runtime.ParamLocationPath, ctx.Param("username"), &username)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter username: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiVVersionUserUsernameUsername(ctx, version, username)
	return err
}

// DeleteApiVVersionUserId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteApiVVersionUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameterWithLocation("simple", false, "version", runtime.ParamLocationPath, ctx.Param("version"), &version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteApiVVersionUserId(ctx, version, id)
	return err
}

// GetApiVVersionUserId converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiVVersionUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameterWithLocation("simple", false, "version", runtime.ParamLocationPath, ctx.Param("version"), &version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiVVersionUserId(ctx, version, id)
	return err
}

// PutApiVVersionUserId converts echo context to params.
func (w *ServerInterfaceWrapper) PutApiVVersionUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameterWithLocation("simple", false, "version", runtime.ParamLocationPath, ctx.Param("version"), &version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutApiVVersionUserId(ctx, version, id)
	return err
}

// GetApiVVersionErrorInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiVVersionErrorInfo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameterWithLocation("simple", false, "version", runtime.ParamLocationPath, ctx.Param("version"), &version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiVVersionErrorInfo(ctx, version)
	return err
}

// GetApiVVersionErrorInfoId converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiVVersionErrorInfoId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameterWithLocation("simple", false, "version", runtime.ParamLocationPath, ctx.Param("version"), &version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiVVersionErrorInfoId(ctx, version, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/", wrapper.Get)
	router.GET(baseURL+"/api/v:version/Booking", wrapper.GetApiVVersionBooking)
	router.POST(baseURL+"/api/v:version/Booking/buying/:id", wrapper.PostApiVVersionBookingBuyingId)
	router.POST(baseURL+"/api/v:version/Booking/bypass/:userId", wrapper.PostApiVVersionBookingBypassUserId)
	router.POST(baseURL+"/api/v:version/Booking/cancel/bypass/:id", wrapper.PostApiVVersionBookingCancelBypassId)
	router.POST(baseURL+"/api/v:version/Booking/complete/:id", wrapper.PostApiVVersionBookingCompleteId)
	router.GET(baseURL+"/api/v:version/Booking/counts", wrapper.GetApiVVersionBookingCounts)
	router.GET(baseURL+"/api/v:version/Booking/reserve/:Direction/:Date/:Time", wrapper.GetApiVVersionBookingReserveDirectionDateTime)
	router.GET(baseURL+"/api/v:version/Booking/:userId/:id", wrapper.GetApiVVersionBookingUserIdId)
	router.GET(baseURL+"/api/v:version/Passenger", wrapper.GetApiVVersionPassenger)
	router.POST(baseURL+"/api/v:version/Passenger/:userId", wrapper.PostApiVVersionPassengerUserId)
	router.DELETE(baseURL+"/api/v:version/Passenger/:userId/:id", wrapper.DeleteApiVVersionPassengerUserIdId)
	router.GET(baseURL+"/api/v:version/Passenger/:userId/:id", wrapper.GetApiVVersionPassengerUserIdId)
	router.PUT(baseURL+"/api/v:version/Passenger/:userId/:id", wrapper.PutApiVVersionPassengerUserIdId)
	router.PUT(baseURL+"/api/v:version/Schedule/bulk", wrapper.PutApiVVersionScheduleBulk)
	router.GET(baseURL+"/api/v:version/Schedule/latest", wrapper.GetApiVVersionScheduleLatest)
	router.GET(baseURL+"/api/v:version/Schedule/range/:From/:To", wrapper.GetApiVVersionScheduleRangeFromTo)
	router.DELETE(baseURL+"/api/v:version/Schedule/:Date", wrapper.DeleteApiVVersionScheduleDate)
	router.GET(baseURL+"/api/v:version/Schedule/:Date", wrapper.GetApiVVersionScheduleDate)
	router.PUT(baseURL+"/api/v:version/Schedule/:Date", wrapper.PutApiVVersionScheduleDate)
	router.GET(baseURL+"/api/v:version/Timing/:Direction", wrapper.GetApiVVersionTimingDirection)
	router.PUT(baseURL+"/api/v:version/Timing/:Direction", wrapper.PutApiVVersionTimingDirection)
	router.GET(baseURL+"/api/v:version/User", wrapper.GetApiVVersionUser)
	router.POST(baseURL+"/api/v:version/User", wrapper.PostApiVVersionUser)
	router.GET(baseURL+"/api/v:version/User/Me", wrapper.GetApiVVersionUserMe)
	router.GET(baseURL+"/api/v:version/User/exist/:username", wrapper.GetApiVVersionUserExistUsername)
	router.GET(baseURL+"/api/v:version/User/username/:username", wrapper.GetApiVVersionUserUsernameUsername)
	router.DELETE(baseURL+"/api/v:version/User/:id", wrapper.DeleteApiVVersionUserId)
	router.GET(baseURL+"/api/v:version/User/:id", wrapper.GetApiVVersionUserId)
	router.PUT(baseURL+"/api/v:version/User/:id", wrapper.PutApiVVersionUserId)
	router.GET(baseURL+"/api/v:version/error-info", wrapper.GetApiVVersionErrorInfo)
	router.GET(baseURL+"/api/v:version/error-info/:id", wrapper.GetApiVVersionErrorInfoId)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xcX2/buhX/KgI34L64UXvvwzA/rWmzoXe9RZC6vcCKPDDSscNGIhWSauMZ+u4DSUmW",
	"Y8om9SddHb00hcxzSJ3zO39JaoMilmaMApUCzTdIRLeQYv3fc8buCF29YTmVV6Af4TgmkjCKk0vOMuCS",
	"qOdLnAiYoazxaINiLEH9pXmS4JsE0FzyHGZIrjNAcyQkJ3SFihmKCYdIMXUaLUl0B1J8AIghVhRLxlMs",
	"0RwRKn/7FdUkhEpYATc0qctSivoJu/kKkVSkpQwusRBAV8Cv4N5TDss8ST7g1E0WK6AxcKehGRYiY1xe",
	"PGSEr71IPuTpjdMsbhIRk0S0RDihEclw4i8RZYIJSIhfyx1IKxt6odE7O/4uEQd8mMW+6Y1jo2TXMPOc",
	"xKhF+BpCavRfOSzRHP0l3LqjsPRFoQ1yxQwJiWUuPLzGe0LvHIf3dRj+GMgq+LhKowm3YoZycVyQnwTw",
	"XTrbK7zRQKpf5P7/w/H3QMt9T50agUwx4JFAFJr8ZaFwSnFnXVxwzvg7umSe0xqfdFQ8BkT7QzWAZOKm",
	"wW/AhRusbW/4HksQ8mN0C3GewGiJl23qGuI9YtlYWPcIKj/CJHrkQ86e366eQX1/BbvzPLn7lCko+Vu4",
	"KHkYu5OQimNrq2ZtrE/77BY9YM7x+vD6dziNFL84RIzHru92pUfrF3NcuH8WSZeEp6YsKie4YSwBTL2S",
	"va8L9ufFQ5TkZYVVq3Bv5GH9zND3Bft9CE6HBLaV66DS+jmEsCBpv8rDt/hW04lx3sJfhSMvZzQ/btGa",
	"dSHGAU955yOB/JC8U0168UBEh04YKDJhczNtE/UwaMc8dwBpjGggLrmKStYhyjmRaxUKUjPFOWBu4BWD",
	"iDjJjG9Dv/+5CF7n8pZx8l+sngW3gGPgQS4IXQXyFgJDGug1wFlwQSXw4Bfz9Jfgi8hwBNcBprEaTYM1",
	"y3kg2R3QgFDNQMKDDAjNchncQMK+n6EZImpyMxWaISNxtLOQbRKLM/JvUD5JZbtlhRMxKnGkWzqQYpKg",
	"ObojnFAK8Pe//WOlHp1FLN3yrn7VEX9HBB+I5EywF/8hNJoHry/fBUvGg/Oc0rUqmfUCyxoHvccZxyIo",
	"SQJFoihQo7ZBr85eqklYBhRnBM3Rb2cvz14hZeryVisjVP+sQK9e4UC/77sYzdG/QCKVQImMUWE09+vL",
	"l/tq+5hHEYhS/1i5+i/o41pISNG1ehbijITfNuWiiqr2PzTv64x8/mzGV6PVkjlOQQJXM2yM1u5z4Out",
	"YN+q9KlZIO7XjnKthadqFFTMWtjUAbc/r4Vp6/Vlo6ztXTwAo/ckJXKHj0Nz3onzxzuS9Wa8C63FLQQc",
	"7nMQEmJtDhW0S6tVMN6uYPujIiJc5XLGXW4XFcMS54ksbWPWLkVB0iwBVFzbbUAZPVANX5xlCYk0gMOv",
	"wqRp2wmdiquWfuF+HgQP8knmyBJMxptkz+/ZfEhl+YecSHiTr9WfDYkLHb2YsHiUSyYsLuVck2qjsrmW",
	"XWjpRkY7qo62PB6j6iSh7g2MdkR3ZmUBrj+vAfG5Vkl1uMm1//bHqCavnf9xnObV0HZY/MTY1Es4Z/F6",
	"MFju7aMUWvuTGQxrBhGmESS1NXTw1m80B2MPk8+efPaYYC13+rvhtCSeMNrDdwONWFzWiEtidvR2S4Wd",
	"bcBHDbWSoJbdDaFYFypHmybFDKV5IkmGuQwV/YsYS/xDVzRFozEMPC9P0rk3IN4Ymj2bft4Fa33ucKRi",
	"9Tj/noXqgQmGwxsHAfwbhJu6sVSEm7dYQhFuFiSFwg+KV4ZdzUxxKttMxwNO2SLrVx7Y+DZ6ZoMzL9/u",
	"JGuaybUPaWpVoV3nbu5mZarsp62zp6plNOT3B/wAOB8K3pfNg5UOkN6Od9o3GWx3QW9kT5sUp5nztR5t",
	"GzTz85yla/7nOo2T7W7N7bD1+veBa9KpBzxyD3j3LPq4dXcL+LpFqyPMPANXG7dx7KBO02JIwBx93DWH",
	"t/p5u0FM6doPDC9+gJh5JS6Tek8jG9+9ENbTww3i2Dr6sxnKclu8zif4nmZaYDnZO6UFY6QF1S2B8CZP",
	"9N1PB0Nr3oH5aZryw2PUfhWoHaYOJzdLjkdUlegLcI7diIrK3Jp7Dnsoh3S2f3ewo4UfYORp3TZOTpbt",
	"iBaO6QrCzT85S4tws2CFJ3CuFL2iXjCngKqGjrIPwaZdiG5dHevVuaFbR36TdO0cOc4ypP2YzUKvOrmi",
	"Lff7nmhj8IRK14ZqZj6+ahL4eKHTbnrdoudhXp4BtIWZrw+Y+aS+E9BGTambd8FHrfpOHdSWwGYu1zbP",
	"wzgmhIawedbEAf6DnUx5Xs52e8W6IxgtDDwR2OTgBDtD4OpJJzQ9iUfdfjpgZE/adme/K3QH8aJWVn5g",
	"tnjQT8L5LIge6nQMZJAjIJ+qW+vTMZDTLOX3L/4PXMa7T9C1hHeYwclCtWnpYONylsNuiM/smEX1YZCR",
	"Q4H96xT+gaCdj2cYsDDygVhLCAj/AI8o8Ac8h9675U6NXe8tAy2KfTxyCM3pL86YgzBKmoWHHvU3bhpx",
	"1m2HuRw8lUB+Rlt/UKiHB9nn0cF7NJgMgb8KEt0gWKFvQuHToLAnAPtibzjYeR/48zj4SuJpA8OSnDqa",
	"9CTkyXybJc3x/tmEmhEPnk2F0lCFEnDO+Ivqa30O3nD7/fLndN17/0uyvk0dRw6HujbHWDhB4fMrrcFj",
	"aPC5I1pDYoqS4/ihrc11dEAWBp6ep8nBF2eNL51qSFTfOP1yXVwX/wsAAP//tF6wccBpAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
