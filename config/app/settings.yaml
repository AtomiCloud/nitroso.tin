cache:
  MAIN:
    password: supersecret
    ssl: false
    endpoints:
      0: nitroso-zinc-main-cache:6379
app:
  landscape: lapras
  platform: nitroso
  service: tin
  module: cdc
  version: 1.0.0

otel:
  metric:
    enable: false
    reader: {}
    exporter:
      exporterType: console
  trace:
    enable: false
    processor:
      processorType: sync
    exporter:
      exporterType: console
  log:
    zerolog:
      timeFormat: unix # unix, unixms, unixmicro, unixnano, rfc3339, rfc3339Nano, rfc822, rfc850, rfc822z, rfc1123, rfc1123Z
      durationFieldInteger: true
      logLevel: debug # trace, debug, info, warn, error, fatal, panic, none

      stacktrace: true
      caller: true
      timestamp: true
      pretty: false

      fields:
        caller: caller
        timestamp: timestamp
        error: error
        errorStack: stack
        level: level
        message: message
        traceId: traceId
        spanId: spanId
#  // Setup
#
#  landscape := os.Getenv("LANDSCAPE")
#  if landscape == "" {
#  landscape = "lapras"
#}
#  baseConfig := os.Getenv("BASE_CONFIG")
#  if baseConfig == "" {
#  baseConfig = "./config/app"
#}
#
#  loader := config.Loader{
#Landscape:  landscape,
#BaseConfig: baseConfig,
#}
#  cfg, cfgErr := loader.Load()
#  if cfgErr != nil {
#  panic(cfgErr)
#}
#
#metricConfigurator := telemetry.MetricConfigurator{Cfg: cfg.Otel.Metric}
#traceConfigurator := telemetry.TraceConfigurator{Cfg: cfg.Otel.Trace}
#  otelConfigurator := telemetry.OtelConfigurator{
#App:    cfg.App,
#Otel:   cfg.Otel,
#Trace:  traceConfigurator,
#Metric: metricConfigurator,
#}
#  logFactory := telemetry.LoggerFactory{
#Cfg: cfg.Otel.Log,
#}
#  logger, loggerErr := logFactory.Get()
#  if loggerErr != nil {
#  panic(loggerErr)
#}
